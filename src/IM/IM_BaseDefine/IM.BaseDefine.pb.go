// Code generated by protoc-gen-go.
// source: IM.BaseDefine.proto
// DO NOT EDIT!

/*
Package IM_BaseDefine is a generated protocol buffer package.

It is generated from these files:
	IM.BaseDefine.proto

It has these top-level messages:
	IpAddr
	UserInfo
	ContactSessionInfo
	UserStat
	ServerUserStat
	UnreadInfo
	MsgInfo
	GroupVersionInfo
	GroupInfo
	UserTokenInfo
	PushResult
	ShieldStatus
	OfflineFileInfo
	DepartInfo
	PushShieldStatus
	MsgAckType
	SubUserStatus
	CustomerInfo
*/
package IM_BaseDefine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// service id
type ServiceID int32

const (
	ServiceID_SID_LOGIN          ServiceID = 1
	ServiceID_SID_BUDDY_LIST     ServiceID = 2
	ServiceID_SID_MSG            ServiceID = 3
	ServiceID_SID_GROUP          ServiceID = 4
	ServiceID_SID_FILE           ServiceID = 5
	ServiceID_SID_SWITCH_SERVICE ServiceID = 6
	ServiceID_SID_OTHER          ServiceID = 7
	ServiceID_SID_INTERNAL       ServiceID = 8
	ServiceID_SID_CONTROL        ServiceID = 9
	ServiceID_SID_MSG_EX         ServiceID = 10
	ServiceID_SID_BUDDY_LIST_EX  ServiceID = 11
	ServiceID_SID_CUSTOMER       ServiceID = 12
)

var ServiceID_name = map[int32]string{
	1:  "SID_LOGIN",
	2:  "SID_BUDDY_LIST",
	3:  "SID_MSG",
	4:  "SID_GROUP",
	5:  "SID_FILE",
	6:  "SID_SWITCH_SERVICE",
	7:  "SID_OTHER",
	8:  "SID_INTERNAL",
	9:  "SID_CONTROL",
	10: "SID_MSG_EX",
	11: "SID_BUDDY_LIST_EX",
	12: "SID_CUSTOMER",
}
var ServiceID_value = map[string]int32{
	"SID_LOGIN":          1,
	"SID_BUDDY_LIST":     2,
	"SID_MSG":            3,
	"SID_GROUP":          4,
	"SID_FILE":           5,
	"SID_SWITCH_SERVICE": 6,
	"SID_OTHER":          7,
	"SID_INTERNAL":       8,
	"SID_CONTROL":        9,
	"SID_MSG_EX":         10,
	"SID_BUDDY_LIST_EX":  11,
	"SID_CUSTOMER":       12,
}

func (x ServiceID) Enum() *ServiceID {
	p := new(ServiceID)
	*p = x
	return p
}
func (x ServiceID) String() string {
	return proto.EnumName(ServiceID_name, int32(x))
}
func (x *ServiceID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceID_value, data, "ServiceID")
	if err != nil {
		return err
	}
	*x = ServiceID(value)
	return nil
}
func (ServiceID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// command id for login
type LoginCmdID int32

const (
	LoginCmdID_CID_LOGIN_REQ_MSGSERVER         LoginCmdID = 257
	LoginCmdID_CID_LOGIN_RES_MSGSERVER         LoginCmdID = 258
	LoginCmdID_CID_LOGIN_REQ_USERLOGIN         LoginCmdID = 259
	LoginCmdID_CID_LOGIN_RES_USERLOGIN         LoginCmdID = 260
	LoginCmdID_CID_LOGIN_REQ_LOGINOUT          LoginCmdID = 261
	LoginCmdID_CID_LOGIN_RES_LOGINOUT          LoginCmdID = 262
	LoginCmdID_CID_LOGIN_KICK_USER             LoginCmdID = 263
	LoginCmdID_CID_LOGIN_REQ_DEVICETOKEN       LoginCmdID = 264
	LoginCmdID_CID_LOGIN_RES_DEVICETOKEN       LoginCmdID = 265
	LoginCmdID_CID_LOGIN_REQ_KICKPCCLIENT      LoginCmdID = 266
	LoginCmdID_CID_LOGIN_RES_KICKPCCLIENT      LoginCmdID = 267
	LoginCmdID_CID_LOGIN_REQ_PUSH_SHIELD       LoginCmdID = 268
	LoginCmdID_CID_LOGIN_RES_PUSH_SHIELD       LoginCmdID = 269
	LoginCmdID_CID_LOGIN_REQ_QUERY_PUSH_SHIELD LoginCmdID = 270
	LoginCmdID_CID_LOGIN_RES_QUERY_PUSH_SHIELD LoginCmdID = 271
)

var LoginCmdID_name = map[int32]string{
	257: "CID_LOGIN_REQ_MSGSERVER",
	258: "CID_LOGIN_RES_MSGSERVER",
	259: "CID_LOGIN_REQ_USERLOGIN",
	260: "CID_LOGIN_RES_USERLOGIN",
	261: "CID_LOGIN_REQ_LOGINOUT",
	262: "CID_LOGIN_RES_LOGINOUT",
	263: "CID_LOGIN_KICK_USER",
	264: "CID_LOGIN_REQ_DEVICETOKEN",
	265: "CID_LOGIN_RES_DEVICETOKEN",
	266: "CID_LOGIN_REQ_KICKPCCLIENT",
	267: "CID_LOGIN_RES_KICKPCCLIENT",
	268: "CID_LOGIN_REQ_PUSH_SHIELD",
	269: "CID_LOGIN_RES_PUSH_SHIELD",
	270: "CID_LOGIN_REQ_QUERY_PUSH_SHIELD",
	271: "CID_LOGIN_RES_QUERY_PUSH_SHIELD",
}
var LoginCmdID_value = map[string]int32{
	"CID_LOGIN_REQ_MSGSERVER":         257,
	"CID_LOGIN_RES_MSGSERVER":         258,
	"CID_LOGIN_REQ_USERLOGIN":         259,
	"CID_LOGIN_RES_USERLOGIN":         260,
	"CID_LOGIN_REQ_LOGINOUT":          261,
	"CID_LOGIN_RES_LOGINOUT":          262,
	"CID_LOGIN_KICK_USER":             263,
	"CID_LOGIN_REQ_DEVICETOKEN":       264,
	"CID_LOGIN_RES_DEVICETOKEN":       265,
	"CID_LOGIN_REQ_KICKPCCLIENT":      266,
	"CID_LOGIN_RES_KICKPCCLIENT":      267,
	"CID_LOGIN_REQ_PUSH_SHIELD":       268,
	"CID_LOGIN_RES_PUSH_SHIELD":       269,
	"CID_LOGIN_REQ_QUERY_PUSH_SHIELD": 270,
	"CID_LOGIN_RES_QUERY_PUSH_SHIELD": 271,
}

func (x LoginCmdID) Enum() *LoginCmdID {
	p := new(LoginCmdID)
	*p = x
	return p
}
func (x LoginCmdID) String() string {
	return proto.EnumName(LoginCmdID_name, int32(x))
}
func (x *LoginCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LoginCmdID_value, data, "LoginCmdID")
	if err != nil {
		return err
	}
	*x = LoginCmdID(value)
	return nil
}
func (LoginCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// command id for buddy list
type BuddyListCmdID int32

const (
	BuddyListCmdID_CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST  BuddyListCmdID = 513
	BuddyListCmdID_CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE BuddyListCmdID = 514
	BuddyListCmdID_CID_BUDDY_LIST_STATUS_NOTIFY                   BuddyListCmdID = 515
	BuddyListCmdID_CID_BUDDY_LIST_USER_INFO_REQUEST               BuddyListCmdID = 516
	BuddyListCmdID_CID_BUDDY_LIST_USER_INFO_RESPONSE              BuddyListCmdID = 517
	BuddyListCmdID_CID_BUDDY_LIST_REMOVE_SESSION_REQ              BuddyListCmdID = 518
	BuddyListCmdID_CID_BUDDY_LIST_REMOVE_SESSION_RES              BuddyListCmdID = 519
	BuddyListCmdID_CID_BUDDY_LIST_ALL_USER_REQUEST                BuddyListCmdID = 520
	BuddyListCmdID_CID_BUDDY_LIST_ALL_USER_RESPONSE               BuddyListCmdID = 521
	BuddyListCmdID_CID_BUDDY_LIST_USERS_STATUS_REQUEST            BuddyListCmdID = 522
	BuddyListCmdID_CID_BUDDY_LIST_USERS_STATUS_RESPONSE           BuddyListCmdID = 523
	BuddyListCmdID_CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST           BuddyListCmdID = 524
	BuddyListCmdID_CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE          BuddyListCmdID = 525
	BuddyListCmdID_CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY          BuddyListCmdID = 526
	BuddyListCmdID_CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY           BuddyListCmdID = 527
	BuddyListCmdID_CID_BUDDY_LIST_DEPARTMENT_REQUEST              BuddyListCmdID = 528
	BuddyListCmdID_CID_BUDDY_LIST_DEPARTMENT_RESPONSE             BuddyListCmdID = 529
	BuddyListCmdID_CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY           BuddyListCmdID = 530
	BuddyListCmdID_CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST        BuddyListCmdID = 531
	BuddyListCmdID_CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE       BuddyListCmdID = 532
	BuddyListCmdID_CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY        BuddyListCmdID = 533
	BuddyListCmdID_CID_BUDDY_LIST_USER_INFO_BY_NAME_REQUEST       BuddyListCmdID = 534
	BuddyListCmdID_CID_BUDDY_LIST_USER_INFO_BY_NAME_RESPONSE      BuddyListCmdID = 535
)

var BuddyListCmdID_name = map[int32]string{
	513: "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST",
	514: "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE",
	515: "CID_BUDDY_LIST_STATUS_NOTIFY",
	516: "CID_BUDDY_LIST_USER_INFO_REQUEST",
	517: "CID_BUDDY_LIST_USER_INFO_RESPONSE",
	518: "CID_BUDDY_LIST_REMOVE_SESSION_REQ",
	519: "CID_BUDDY_LIST_REMOVE_SESSION_RES",
	520: "CID_BUDDY_LIST_ALL_USER_REQUEST",
	521: "CID_BUDDY_LIST_ALL_USER_RESPONSE",
	522: "CID_BUDDY_LIST_USERS_STATUS_REQUEST",
	523: "CID_BUDDY_LIST_USERS_STATUS_RESPONSE",
	524: "CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST",
	525: "CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE",
	526: "CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY",
	527: "CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY",
	528: "CID_BUDDY_LIST_DEPARTMENT_REQUEST",
	529: "CID_BUDDY_LIST_DEPARTMENT_RESPONSE",
	530: "CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY",
	531: "CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST",
	532: "CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE",
	533: "CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY",
	534: "CID_BUDDY_LIST_USER_INFO_BY_NAME_REQUEST",
	535: "CID_BUDDY_LIST_USER_INFO_BY_NAME_RESPONSE",
}
var BuddyListCmdID_value = map[string]int32{
	"CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST":  513,
	"CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE": 514,
	"CID_BUDDY_LIST_STATUS_NOTIFY":                   515,
	"CID_BUDDY_LIST_USER_INFO_REQUEST":               516,
	"CID_BUDDY_LIST_USER_INFO_RESPONSE":              517,
	"CID_BUDDY_LIST_REMOVE_SESSION_REQ":              518,
	"CID_BUDDY_LIST_REMOVE_SESSION_RES":              519,
	"CID_BUDDY_LIST_ALL_USER_REQUEST":                520,
	"CID_BUDDY_LIST_ALL_USER_RESPONSE":               521,
	"CID_BUDDY_LIST_USERS_STATUS_REQUEST":            522,
	"CID_BUDDY_LIST_USERS_STATUS_RESPONSE":           523,
	"CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST":           524,
	"CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE":          525,
	"CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY":          526,
	"CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY":           527,
	"CID_BUDDY_LIST_DEPARTMENT_REQUEST":              528,
	"CID_BUDDY_LIST_DEPARTMENT_RESPONSE":             529,
	"CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY":           530,
	"CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST":        531,
	"CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE":       532,
	"CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY":        533,
	"CID_BUDDY_LIST_USER_INFO_BY_NAME_REQUEST":       534,
	"CID_BUDDY_LIST_USER_INFO_BY_NAME_RESPONSE":      535,
}

func (x BuddyListCmdID) Enum() *BuddyListCmdID {
	p := new(BuddyListCmdID)
	*p = x
	return p
}
func (x BuddyListCmdID) String() string {
	return proto.EnumName(BuddyListCmdID_name, int32(x))
}
func (x *BuddyListCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BuddyListCmdID_value, data, "BuddyListCmdID")
	if err != nil {
		return err
	}
	*x = BuddyListCmdID(value)
	return nil
}
func (BuddyListCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// command id for msg
type MessageCmdID int32

const (
	MessageCmdID_CID_MSG_DATA                  MessageCmdID = 769
	MessageCmdID_CID_MSG_DATA_ACK              MessageCmdID = 770
	MessageCmdID_CID_MSG_READ_ACK              MessageCmdID = 771
	MessageCmdID_CID_MSG_READ_NOTIFY           MessageCmdID = 772
	MessageCmdID_CID_MSG_TIME_REQUEST          MessageCmdID = 773
	MessageCmdID_CID_MSG_TIME_RESPONSE         MessageCmdID = 774
	MessageCmdID_CID_MSG_UNREAD_CNT_REQUEST    MessageCmdID = 775
	MessageCmdID_CID_MSG_UNREAD_CNT_RESPONSE   MessageCmdID = 776
	MessageCmdID_CID_MSG_LIST_REQUEST          MessageCmdID = 777
	MessageCmdID_CID_MSG_LIST_RESPONSE         MessageCmdID = 778
	MessageCmdID_CID_MSG_GET_LATEST_MSG_ID_REQ MessageCmdID = 779
	MessageCmdID_CID_MSG_GET_LATEST_MSG_ID_RSP MessageCmdID = 780
	MessageCmdID_CID_MSG_GET_BY_MSG_ID_REQ     MessageCmdID = 781
	MessageCmdID_CID_MSG_GET_BY_MSG_ID_RES     MessageCmdID = 782
	MessageCmdID_CID_MSG_GET_LOST_MSG_ID_REQ   MessageCmdID = 783
	MessageCmdID_CID_MSG_GET_LOST_MSG_ID_RSP   MessageCmdID = 784
	MessageCmdID_CID_MSG_DEL_MSG_REQ           MessageCmdID = 785
	MessageCmdID_CID_MSG_DEL_MSG_RSP           MessageCmdID = 786
)

var MessageCmdID_name = map[int32]string{
	769: "CID_MSG_DATA",
	770: "CID_MSG_DATA_ACK",
	771: "CID_MSG_READ_ACK",
	772: "CID_MSG_READ_NOTIFY",
	773: "CID_MSG_TIME_REQUEST",
	774: "CID_MSG_TIME_RESPONSE",
	775: "CID_MSG_UNREAD_CNT_REQUEST",
	776: "CID_MSG_UNREAD_CNT_RESPONSE",
	777: "CID_MSG_LIST_REQUEST",
	778: "CID_MSG_LIST_RESPONSE",
	779: "CID_MSG_GET_LATEST_MSG_ID_REQ",
	780: "CID_MSG_GET_LATEST_MSG_ID_RSP",
	781: "CID_MSG_GET_BY_MSG_ID_REQ",
	782: "CID_MSG_GET_BY_MSG_ID_RES",
	783: "CID_MSG_GET_LOST_MSG_ID_REQ",
	784: "CID_MSG_GET_LOST_MSG_ID_RSP",
	785: "CID_MSG_DEL_MSG_REQ",
	786: "CID_MSG_DEL_MSG_RSP",
}
var MessageCmdID_value = map[string]int32{
	"CID_MSG_DATA":                  769,
	"CID_MSG_DATA_ACK":              770,
	"CID_MSG_READ_ACK":              771,
	"CID_MSG_READ_NOTIFY":           772,
	"CID_MSG_TIME_REQUEST":          773,
	"CID_MSG_TIME_RESPONSE":         774,
	"CID_MSG_UNREAD_CNT_REQUEST":    775,
	"CID_MSG_UNREAD_CNT_RESPONSE":   776,
	"CID_MSG_LIST_REQUEST":          777,
	"CID_MSG_LIST_RESPONSE":         778,
	"CID_MSG_GET_LATEST_MSG_ID_REQ": 779,
	"CID_MSG_GET_LATEST_MSG_ID_RSP": 780,
	"CID_MSG_GET_BY_MSG_ID_REQ":     781,
	"CID_MSG_GET_BY_MSG_ID_RES":     782,
	"CID_MSG_GET_LOST_MSG_ID_REQ":   783,
	"CID_MSG_GET_LOST_MSG_ID_RSP":   784,
	"CID_MSG_DEL_MSG_REQ":           785,
	"CID_MSG_DEL_MSG_RSP":           786,
}

func (x MessageCmdID) Enum() *MessageCmdID {
	p := new(MessageCmdID)
	*p = x
	return p
}
func (x MessageCmdID) String() string {
	return proto.EnumName(MessageCmdID_name, int32(x))
}
func (x *MessageCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageCmdID_value, data, "MessageCmdID")
	if err != nil {
		return err
	}
	*x = MessageCmdID(value)
	return nil
}
func (MessageCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// command id for group message
type GroupCmdID int32

const (
	GroupCmdID_CID_GROUP_NORMAL_LIST_REQUEST    GroupCmdID = 1025
	GroupCmdID_CID_GROUP_NORMAL_LIST_RESPONSE   GroupCmdID = 1026
	GroupCmdID_CID_GROUP_INFO_REQUEST           GroupCmdID = 1027
	GroupCmdID_CID_GROUP_INFO_RESPONSE          GroupCmdID = 1028
	GroupCmdID_CID_GROUP_CREATE_REQUEST         GroupCmdID = 1029
	GroupCmdID_CID_GROUP_CREATE_RESPONSE        GroupCmdID = 1030
	GroupCmdID_CID_GROUP_CHANGE_MEMBER_REQUEST  GroupCmdID = 1031
	GroupCmdID_CID_GROUP_CHANGE_MEMBER_RESPONSE GroupCmdID = 1032
	GroupCmdID_CID_GROUP_SHIELD_GROUP_REQUEST   GroupCmdID = 1033
	GroupCmdID_CID_GROUP_SHIELD_GROUP_RESPONSE  GroupCmdID = 1034
	GroupCmdID_CID_GROUP_CHANGE_MEMBER_NOTIFY   GroupCmdID = 1035
)

var GroupCmdID_name = map[int32]string{
	1025: "CID_GROUP_NORMAL_LIST_REQUEST",
	1026: "CID_GROUP_NORMAL_LIST_RESPONSE",
	1027: "CID_GROUP_INFO_REQUEST",
	1028: "CID_GROUP_INFO_RESPONSE",
	1029: "CID_GROUP_CREATE_REQUEST",
	1030: "CID_GROUP_CREATE_RESPONSE",
	1031: "CID_GROUP_CHANGE_MEMBER_REQUEST",
	1032: "CID_GROUP_CHANGE_MEMBER_RESPONSE",
	1033: "CID_GROUP_SHIELD_GROUP_REQUEST",
	1034: "CID_GROUP_SHIELD_GROUP_RESPONSE",
	1035: "CID_GROUP_CHANGE_MEMBER_NOTIFY",
}
var GroupCmdID_value = map[string]int32{
	"CID_GROUP_NORMAL_LIST_REQUEST":    1025,
	"CID_GROUP_NORMAL_LIST_RESPONSE":   1026,
	"CID_GROUP_INFO_REQUEST":           1027,
	"CID_GROUP_INFO_RESPONSE":          1028,
	"CID_GROUP_CREATE_REQUEST":         1029,
	"CID_GROUP_CREATE_RESPONSE":        1030,
	"CID_GROUP_CHANGE_MEMBER_REQUEST":  1031,
	"CID_GROUP_CHANGE_MEMBER_RESPONSE": 1032,
	"CID_GROUP_SHIELD_GROUP_REQUEST":   1033,
	"CID_GROUP_SHIELD_GROUP_RESPONSE":  1034,
	"CID_GROUP_CHANGE_MEMBER_NOTIFY":   1035,
}

func (x GroupCmdID) Enum() *GroupCmdID {
	p := new(GroupCmdID)
	*p = x
	return p
}
func (x GroupCmdID) String() string {
	return proto.EnumName(GroupCmdID_name, int32(x))
}
func (x *GroupCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupCmdID_value, data, "GroupCmdID")
	if err != nil {
		return err
	}
	*x = GroupCmdID(value)
	return nil
}
func (GroupCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type FileCmdID int32

const (
	FileCmdID_CID_FILE_LOGIN_REQ     FileCmdID = 1281
	FileCmdID_CID_FILE_LOGIN_RES     FileCmdID = 1282
	FileCmdID_CID_FILE_STATE         FileCmdID = 1283
	FileCmdID_CID_FILE_PULL_DATA_REQ FileCmdID = 1284
	FileCmdID_CID_FILE_PULL_DATA_RSP FileCmdID = 1285
	// To MsgServer
	FileCmdID_CID_FILE_REQUEST         FileCmdID = 1286
	FileCmdID_CID_FILE_RESPONSE        FileCmdID = 1287
	FileCmdID_CID_FILE_NOTIFY          FileCmdID = 1288
	FileCmdID_CID_FILE_HAS_OFFLINE_REQ FileCmdID = 1289
	FileCmdID_CID_FILE_HAS_OFFLINE_RES FileCmdID = 1290
	FileCmdID_CID_FILE_ADD_OFFLINE_REQ FileCmdID = 1291
	FileCmdID_CID_FILE_DEL_OFFLINE_REQ FileCmdID = 1292
)

var FileCmdID_name = map[int32]string{
	1281: "CID_FILE_LOGIN_REQ",
	1282: "CID_FILE_LOGIN_RES",
	1283: "CID_FILE_STATE",
	1284: "CID_FILE_PULL_DATA_REQ",
	1285: "CID_FILE_PULL_DATA_RSP",
	1286: "CID_FILE_REQUEST",
	1287: "CID_FILE_RESPONSE",
	1288: "CID_FILE_NOTIFY",
	1289: "CID_FILE_HAS_OFFLINE_REQ",
	1290: "CID_FILE_HAS_OFFLINE_RES",
	1291: "CID_FILE_ADD_OFFLINE_REQ",
	1292: "CID_FILE_DEL_OFFLINE_REQ",
}
var FileCmdID_value = map[string]int32{
	"CID_FILE_LOGIN_REQ":       1281,
	"CID_FILE_LOGIN_RES":       1282,
	"CID_FILE_STATE":           1283,
	"CID_FILE_PULL_DATA_REQ":   1284,
	"CID_FILE_PULL_DATA_RSP":   1285,
	"CID_FILE_REQUEST":         1286,
	"CID_FILE_RESPONSE":        1287,
	"CID_FILE_NOTIFY":          1288,
	"CID_FILE_HAS_OFFLINE_REQ": 1289,
	"CID_FILE_HAS_OFFLINE_RES": 1290,
	"CID_FILE_ADD_OFFLINE_REQ": 1291,
	"CID_FILE_DEL_OFFLINE_REQ": 1292,
}

func (x FileCmdID) Enum() *FileCmdID {
	p := new(FileCmdID)
	*p = x
	return p
}
func (x FileCmdID) String() string {
	return proto.EnumName(FileCmdID_name, int32(x))
}
func (x *FileCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileCmdID_value, data, "FileCmdID")
	if err != nil {
		return err
	}
	*x = FileCmdID(value)
	return nil
}
func (FileCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// command id for switch service
type SwitchServiceCmdID int32

const (
	SwitchServiceCmdID_CID_SWITCH_P2P_CMD SwitchServiceCmdID = 1537
)

var SwitchServiceCmdID_name = map[int32]string{
	1537: "CID_SWITCH_P2P_CMD",
}
var SwitchServiceCmdID_value = map[string]int32{
	"CID_SWITCH_P2P_CMD": 1537,
}

func (x SwitchServiceCmdID) Enum() *SwitchServiceCmdID {
	p := new(SwitchServiceCmdID)
	*p = x
	return p
}
func (x SwitchServiceCmdID) String() string {
	return proto.EnumName(SwitchServiceCmdID_name, int32(x))
}
func (x *SwitchServiceCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SwitchServiceCmdID_value, data, "SwitchServiceCmdID")
	if err != nil {
		return err
	}
	*x = SwitchServiceCmdID(value)
	return nil
}
func (SwitchServiceCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type OtherCmdID int32

const (
	OtherCmdID_CID_OTHER_HEARTBEAT            OtherCmdID = 1793
	OtherCmdID_CID_OTHER_STOP_RECV_PACKET     OtherCmdID = 1794
	OtherCmdID_CID_OTHER_VALIDATE_REQ         OtherCmdID = 1795
	OtherCmdID_CID_OTHER_VALIDATE_RSP         OtherCmdID = 1796
	OtherCmdID_CID_OTHER_GET_DEVICE_TOKEN_REQ OtherCmdID = 1797
	OtherCmdID_CID_OTHER_GET_DEVICE_TOKEN_RSP OtherCmdID = 1798
	OtherCmdID_CID_OTHER_ROLE_SET             OtherCmdID = 1799
	OtherCmdID_CID_OTHER_ONLINE_USER_INFO     OtherCmdID = 1800
	OtherCmdID_CID_OTHER_MSG_SERV_INFO        OtherCmdID = 1801
	OtherCmdID_CID_OTHER_USER_STATUS_UPDATE   OtherCmdID = 1802
	OtherCmdID_CID_OTHER_USER_CNT_UPDATE      OtherCmdID = 1803
	OtherCmdID_CID_OTHER_SERVER_KICK_USER     OtherCmdID = 1805
	OtherCmdID_CID_OTHER_LOGIN_STATUS_NOTIFY  OtherCmdID = 1806
	OtherCmdID_CID_OTHER_PUSH_TO_USER_REQ     OtherCmdID = 1807
	OtherCmdID_CID_OTHER_PUSH_TO_USER_RSP     OtherCmdID = 1808
	OtherCmdID_CID_OTHER_GET_SHIELD_REQ       OtherCmdID = 1809
	OtherCmdID_CID_OTHER_GET_SHIELD_RSP       OtherCmdID = 1810
	OtherCmdID_CID_OTHER_FILE_TRANSFER_REQ    OtherCmdID = 1841
	OtherCmdID_CID_OTHER_FILE_TRANSFER_RSP    OtherCmdID = 1842
	OtherCmdID_CID_OTHER_FILE_SERVER_IP_REQ   OtherCmdID = 1843
	OtherCmdID_CID_OTHER_FILE_SERVER_IP_RSP   OtherCmdID = 1844
	OtherCmdID_CID_OTHER_KICK_PROHIBITEDUSER  OtherCmdID = 1845
	OtherCmdID_CID_OTHER_CHECK_PC_ONLINE_ONLY OtherCmdID = 1846
)

var OtherCmdID_name = map[int32]string{
	1793: "CID_OTHER_HEARTBEAT",
	1794: "CID_OTHER_STOP_RECV_PACKET",
	1795: "CID_OTHER_VALIDATE_REQ",
	1796: "CID_OTHER_VALIDATE_RSP",
	1797: "CID_OTHER_GET_DEVICE_TOKEN_REQ",
	1798: "CID_OTHER_GET_DEVICE_TOKEN_RSP",
	1799: "CID_OTHER_ROLE_SET",
	1800: "CID_OTHER_ONLINE_USER_INFO",
	1801: "CID_OTHER_MSG_SERV_INFO",
	1802: "CID_OTHER_USER_STATUS_UPDATE",
	1803: "CID_OTHER_USER_CNT_UPDATE",
	1805: "CID_OTHER_SERVER_KICK_USER",
	1806: "CID_OTHER_LOGIN_STATUS_NOTIFY",
	1807: "CID_OTHER_PUSH_TO_USER_REQ",
	1808: "CID_OTHER_PUSH_TO_USER_RSP",
	1809: "CID_OTHER_GET_SHIELD_REQ",
	1810: "CID_OTHER_GET_SHIELD_RSP",
	1841: "CID_OTHER_FILE_TRANSFER_REQ",
	1842: "CID_OTHER_FILE_TRANSFER_RSP",
	1843: "CID_OTHER_FILE_SERVER_IP_REQ",
	1844: "CID_OTHER_FILE_SERVER_IP_RSP",
	1845: "CID_OTHER_KICK_PROHIBITEDUSER",
	1846: "CID_OTHER_CHECK_PC_ONLINE_ONLY",
}
var OtherCmdID_value = map[string]int32{
	"CID_OTHER_HEARTBEAT":            1793,
	"CID_OTHER_STOP_RECV_PACKET":     1794,
	"CID_OTHER_VALIDATE_REQ":         1795,
	"CID_OTHER_VALIDATE_RSP":         1796,
	"CID_OTHER_GET_DEVICE_TOKEN_REQ": 1797,
	"CID_OTHER_GET_DEVICE_TOKEN_RSP": 1798,
	"CID_OTHER_ROLE_SET":             1799,
	"CID_OTHER_ONLINE_USER_INFO":     1800,
	"CID_OTHER_MSG_SERV_INFO":        1801,
	"CID_OTHER_USER_STATUS_UPDATE":   1802,
	"CID_OTHER_USER_CNT_UPDATE":      1803,
	"CID_OTHER_SERVER_KICK_USER":     1805,
	"CID_OTHER_LOGIN_STATUS_NOTIFY":  1806,
	"CID_OTHER_PUSH_TO_USER_REQ":     1807,
	"CID_OTHER_PUSH_TO_USER_RSP":     1808,
	"CID_OTHER_GET_SHIELD_REQ":       1809,
	"CID_OTHER_GET_SHIELD_RSP":       1810,
	"CID_OTHER_FILE_TRANSFER_REQ":    1841,
	"CID_OTHER_FILE_TRANSFER_RSP":    1842,
	"CID_OTHER_FILE_SERVER_IP_REQ":   1843,
	"CID_OTHER_FILE_SERVER_IP_RSP":   1844,
	"CID_OTHER_KICK_PROHIBITEDUSER":  1845,
	"CID_OTHER_CHECK_PC_ONLINE_ONLY": 1846,
}

func (x OtherCmdID) Enum() *OtherCmdID {
	p := new(OtherCmdID)
	*p = x
	return p
}
func (x OtherCmdID) String() string {
	return proto.EnumName(OtherCmdID_name, int32(x))
}
func (x *OtherCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OtherCmdID_value, data, "OtherCmdID")
	if err != nil {
		return err
	}
	*x = OtherCmdID(value)
	return nil
}
func (OtherCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ControlCmdID int32

const (
	ControlCmdID_CID_CONTROL_CHECK_USER_REQ ControlCmdID = 2305
	ControlCmdID_CID_CONTROL_CHECK_USER_RSP ControlCmdID = 2306
)

var ControlCmdID_name = map[int32]string{
	2305: "CID_CONTROL_CHECK_USER_REQ",
	2306: "CID_CONTROL_CHECK_USER_RSP",
}
var ControlCmdID_value = map[string]int32{
	"CID_CONTROL_CHECK_USER_REQ": 2305,
	"CID_CONTROL_CHECK_USER_RSP": 2306,
}

func (x ControlCmdID) Enum() *ControlCmdID {
	p := new(ControlCmdID)
	*p = x
	return p
}
func (x ControlCmdID) String() string {
	return proto.EnumName(ControlCmdID_name, int32(x))
}
func (x *ControlCmdID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ControlCmdID_value, data, "ControlCmdID")
	if err != nil {
		return err
	}
	*x = ControlCmdID(value)
	return nil
}
func (ControlCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

//
//  customer 新增
type CustomerCmdId int32

const (
	CustomerCmdId_CID_CUSTOMER_CUSTOMER_INFO_REQ       CustomerCmdId = 3073
	CustomerCmdId_CID_CUSTOMER_CUSTOMER_INFO_RSP       CustomerCmdId = 3074
	CustomerCmdId_CID_CUSTOMER_CHANGE_RECEPTION_REQ    CustomerCmdId = 3077
	CustomerCmdId_CID_CUSTOMER_CHANGE_RECEPTION_RSP    CustomerCmdId = 3078
	CustomerCmdId_CID_CUSTOMER_GET_FORWORDING_LIST_REQ CustomerCmdId = 3079
	CustomerCmdId_CID_CUSTOMER_GET_FORWORDING_LIST_RSP CustomerCmdId = 3080
	CustomerCmdId_CID_CUSTOMER_FORWORDING_REQ          CustomerCmdId = 3081
	CustomerCmdId_CID_CUSTOMER_FORWORDING_RSP          CustomerCmdId = 3082
	CustomerCmdId_CID_CUSTOMER_FORWORDING_NOTIFY       CustomerCmdId = 3083
)

var CustomerCmdId_name = map[int32]string{
	3073: "CID_CUSTOMER_CUSTOMER_INFO_REQ",
	3074: "CID_CUSTOMER_CUSTOMER_INFO_RSP",
	3077: "CID_CUSTOMER_CHANGE_RECEPTION_REQ",
	3078: "CID_CUSTOMER_CHANGE_RECEPTION_RSP",
	3079: "CID_CUSTOMER_GET_FORWORDING_LIST_REQ",
	3080: "CID_CUSTOMER_GET_FORWORDING_LIST_RSP",
	3081: "CID_CUSTOMER_FORWORDING_REQ",
	3082: "CID_CUSTOMER_FORWORDING_RSP",
	3083: "CID_CUSTOMER_FORWORDING_NOTIFY",
}
var CustomerCmdId_value = map[string]int32{
	"CID_CUSTOMER_CUSTOMER_INFO_REQ":       3073,
	"CID_CUSTOMER_CUSTOMER_INFO_RSP":       3074,
	"CID_CUSTOMER_CHANGE_RECEPTION_REQ":    3077,
	"CID_CUSTOMER_CHANGE_RECEPTION_RSP":    3078,
	"CID_CUSTOMER_GET_FORWORDING_LIST_REQ": 3079,
	"CID_CUSTOMER_GET_FORWORDING_LIST_RSP": 3080,
	"CID_CUSTOMER_FORWORDING_REQ":          3081,
	"CID_CUSTOMER_FORWORDING_RSP":          3082,
	"CID_CUSTOMER_FORWORDING_NOTIFY":       3083,
}

func (x CustomerCmdId) Enum() *CustomerCmdId {
	p := new(CustomerCmdId)
	*p = x
	return p
}
func (x CustomerCmdId) String() string {
	return proto.EnumName(CustomerCmdId_name, int32(x))
}
func (x *CustomerCmdId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CustomerCmdId_value, data, "CustomerCmdId")
	if err != nil {
		return err
	}
	*x = CustomerCmdId(value)
	return nil
}
func (CustomerCmdId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ResultType int32

const (
	ResultType_REFUSE_REASON_NONE               ResultType = 0
	ResultType_REFUSE_REASON_NO_MSG_SERVER      ResultType = 1
	ResultType_REFUSE_REASON_MSG_SERVER_FULL    ResultType = 2
	ResultType_REFUSE_REASON_NO_DB_SERVER       ResultType = 3
	ResultType_REFUSE_REASON_NO_LOGIN_SERVER    ResultType = 4
	ResultType_REFUSE_REASON_NO_ROUTE_SERVER    ResultType = 5
	ResultType_REFUSE_REASON_DB_VALIDATE_FAILED ResultType = 6
	ResultType_REFUSE_REASON_VERSION_TOO_OLD    ResultType = 7
	ResultType_REFUSE_REASON_NOT_CUSTOMER       ResultType = 8
)

var ResultType_name = map[int32]string{
	0: "REFUSE_REASON_NONE",
	1: "REFUSE_REASON_NO_MSG_SERVER",
	2: "REFUSE_REASON_MSG_SERVER_FULL",
	3: "REFUSE_REASON_NO_DB_SERVER",
	4: "REFUSE_REASON_NO_LOGIN_SERVER",
	5: "REFUSE_REASON_NO_ROUTE_SERVER",
	6: "REFUSE_REASON_DB_VALIDATE_FAILED",
	7: "REFUSE_REASON_VERSION_TOO_OLD",
	8: "REFUSE_REASON_NOT_CUSTOMER",
}
var ResultType_value = map[string]int32{
	"REFUSE_REASON_NONE":               0,
	"REFUSE_REASON_NO_MSG_SERVER":      1,
	"REFUSE_REASON_MSG_SERVER_FULL":    2,
	"REFUSE_REASON_NO_DB_SERVER":       3,
	"REFUSE_REASON_NO_LOGIN_SERVER":    4,
	"REFUSE_REASON_NO_ROUTE_SERVER":    5,
	"REFUSE_REASON_DB_VALIDATE_FAILED": 6,
	"REFUSE_REASON_VERSION_TOO_OLD":    7,
	"REFUSE_REASON_NOT_CUSTOMER":       8,
}

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}
func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}
func (x *ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResultType_value, data, "ResultType")
	if err != nil {
		return err
	}
	*x = ResultType(value)
	return nil
}
func (ResultType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type KickReasonType int32

const (
	KickReasonType_KICK_REASON_DUPLICATE_USER KickReasonType = 1
	KickReasonType_KICK_REASON_MOBILE_KICK    KickReasonType = 2
	KickReasonType_KICK_REASON_PROHIBITED     KickReasonType = 3
)

var KickReasonType_name = map[int32]string{
	1: "KICK_REASON_DUPLICATE_USER",
	2: "KICK_REASON_MOBILE_KICK",
	3: "KICK_REASON_PROHIBITED",
}
var KickReasonType_value = map[string]int32{
	"KICK_REASON_DUPLICATE_USER": 1,
	"KICK_REASON_MOBILE_KICK":    2,
	"KICK_REASON_PROHIBITED":     3,
}

func (x KickReasonType) Enum() *KickReasonType {
	p := new(KickReasonType)
	*p = x
	return p
}
func (x KickReasonType) String() string {
	return proto.EnumName(KickReasonType_name, int32(x))
}
func (x *KickReasonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KickReasonType_value, data, "KickReasonType")
	if err != nil {
		return err
	}
	*x = KickReasonType(value)
	return nil
}
func (KickReasonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type OnlineListType int32

const (
	OnlineListType_ONLINE_LIST_TYPE_FRIEND_LIST OnlineListType = 1
)

var OnlineListType_name = map[int32]string{
	1: "ONLINE_LIST_TYPE_FRIEND_LIST",
}
var OnlineListType_value = map[string]int32{
	"ONLINE_LIST_TYPE_FRIEND_LIST": 1,
}

func (x OnlineListType) Enum() *OnlineListType {
	p := new(OnlineListType)
	*p = x
	return p
}
func (x OnlineListType) String() string {
	return proto.EnumName(OnlineListType_name, int32(x))
}
func (x *OnlineListType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OnlineListType_value, data, "OnlineListType")
	if err != nil {
		return err
	}
	*x = OnlineListType(value)
	return nil
}
func (OnlineListType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type UserStatType int32

const (
	UserStatType_USER_STATUS_ONLINE  UserStatType = 1
	UserStatType_USER_STATUS_OFFLINE UserStatType = 2
	UserStatType_USER_STATUS_LEAVE   UserStatType = 3
)

var UserStatType_name = map[int32]string{
	1: "USER_STATUS_ONLINE",
	2: "USER_STATUS_OFFLINE",
	3: "USER_STATUS_LEAVE",
}
var UserStatType_value = map[string]int32{
	"USER_STATUS_ONLINE":  1,
	"USER_STATUS_OFFLINE": 2,
	"USER_STATUS_LEAVE":   3,
}

func (x UserStatType) Enum() *UserStatType {
	p := new(UserStatType)
	*p = x
	return p
}
func (x UserStatType) String() string {
	return proto.EnumName(UserStatType_name, int32(x))
}
func (x *UserStatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserStatType_value, data, "UserStatType")
	if err != nil {
		return err
	}
	*x = UserStatType(value)
	return nil
}
func (UserStatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type SessionType int32

const (
	SessionType_SESSION_TYPE_SINGLE SessionType = 1
	SessionType_SESSION_TYPE_GROUP  SessionType = 2
)

var SessionType_name = map[int32]string{
	1: "SESSION_TYPE_SINGLE",
	2: "SESSION_TYPE_GROUP",
}
var SessionType_value = map[string]int32{
	"SESSION_TYPE_SINGLE": 1,
	"SESSION_TYPE_GROUP":  2,
}

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}
func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}
func (x *SessionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionType_value, data, "SessionType")
	if err != nil {
		return err
	}
	*x = SessionType(value)
	return nil
}
func (SessionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type MsgType int32

const (
	MsgType_MSG_TYPE_SINGLE_TEXT  MsgType = 1
	MsgType_MSG_TYPE_SINGLE_AUDIO MsgType = 2
	MsgType_MSG_TYPE_GROUP_TEXT   MsgType = 17
	MsgType_MSG_TYPE_GROUP_AUDIO  MsgType = 18
)

var MsgType_name = map[int32]string{
	1:  "MSG_TYPE_SINGLE_TEXT",
	2:  "MSG_TYPE_SINGLE_AUDIO",
	17: "MSG_TYPE_GROUP_TEXT",
	18: "MSG_TYPE_GROUP_AUDIO",
}
var MsgType_value = map[string]int32{
	"MSG_TYPE_SINGLE_TEXT":  1,
	"MSG_TYPE_SINGLE_AUDIO": 2,
	"MSG_TYPE_GROUP_TEXT":   17,
	"MSG_TYPE_GROUP_AUDIO":  18,
}

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}
func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (x *MsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgType_value, data, "MsgType")
	if err != nil {
		return err
	}
	*x = MsgType(value)
	return nil
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type ClientType int32

const (
	ClientType_CLIENT_TYPE_WINDOWS ClientType = 1
	ClientType_CLIENT_TYPE_MAC     ClientType = 2
	ClientType_CLIENT_TYPE_IOS     ClientType = 17
	ClientType_CLIENT_TYPE_ANDROID ClientType = 18
)

var ClientType_name = map[int32]string{
	1:  "CLIENT_TYPE_WINDOWS",
	2:  "CLIENT_TYPE_MAC",
	17: "CLIENT_TYPE_IOS",
	18: "CLIENT_TYPE_ANDROID",
}
var ClientType_value = map[string]int32{
	"CLIENT_TYPE_WINDOWS": 1,
	"CLIENT_TYPE_MAC":     2,
	"CLIENT_TYPE_IOS":     17,
	"CLIENT_TYPE_ANDROID": 18,
}

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}
func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}
func (x *ClientType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientType_value, data, "ClientType")
	if err != nil {
		return err
	}
	*x = ClientType(value)
	return nil
}
func (ClientType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type GroupType int32

const (
	GroupType_GROUP_TYPE_NORMAL GroupType = 1
	GroupType_GROUP_TYPE_TMP    GroupType = 2
)

var GroupType_name = map[int32]string{
	1: "GROUP_TYPE_NORMAL",
	2: "GROUP_TYPE_TMP",
}
var GroupType_value = map[string]int32{
	"GROUP_TYPE_NORMAL": 1,
	"GROUP_TYPE_TMP":    2,
}

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}
func (x GroupType) String() string {
	return proto.EnumName(GroupType_name, int32(x))
}
func (x *GroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupType_value, data, "GroupType")
	if err != nil {
		return err
	}
	*x = GroupType(value)
	return nil
}
func (GroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type GroupModifyType int32

const (
	GroupModifyType_GROUP_MODIFY_TYPE_ADD GroupModifyType = 1
	GroupModifyType_GROUP_MODIFY_TYPE_DEL GroupModifyType = 2
)

var GroupModifyType_name = map[int32]string{
	1: "GROUP_MODIFY_TYPE_ADD",
	2: "GROUP_MODIFY_TYPE_DEL",
}
var GroupModifyType_value = map[string]int32{
	"GROUP_MODIFY_TYPE_ADD": 1,
	"GROUP_MODIFY_TYPE_DEL": 2,
}

func (x GroupModifyType) Enum() *GroupModifyType {
	p := new(GroupModifyType)
	*p = x
	return p
}
func (x GroupModifyType) String() string {
	return proto.EnumName(GroupModifyType_name, int32(x))
}
func (x *GroupModifyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupModifyType_value, data, "GroupModifyType")
	if err != nil {
		return err
	}
	*x = GroupModifyType(value)
	return nil
}
func (GroupModifyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type TransferFileType int32

const (
	TransferFileType_FILE_TYPE_ONLINE  TransferFileType = 1
	TransferFileType_FILE_TYPE_OFFLINE TransferFileType = 2
)

var TransferFileType_name = map[int32]string{
	1: "FILE_TYPE_ONLINE",
	2: "FILE_TYPE_OFFLINE",
}
var TransferFileType_value = map[string]int32{
	"FILE_TYPE_ONLINE":  1,
	"FILE_TYPE_OFFLINE": 2,
}

func (x TransferFileType) Enum() *TransferFileType {
	p := new(TransferFileType)
	*p = x
	return p
}
func (x TransferFileType) String() string {
	return proto.EnumName(TransferFileType_name, int32(x))
}
func (x *TransferFileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransferFileType_value, data, "TransferFileType")
	if err != nil {
		return err
	}
	*x = TransferFileType(value)
	return nil
}
func (TransferFileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ClientFileState int32

const (
	ClientFileState_CLIENT_FILE_PEER_READY ClientFileState = 0
	ClientFileState_CLIENT_FILE_CANCEL     ClientFileState = 1
	ClientFileState_CLIENT_FILE_REFUSE     ClientFileState = 2
	ClientFileState_CLIENT_FILE_DONE       ClientFileState = 3
)

var ClientFileState_name = map[int32]string{
	0: "CLIENT_FILE_PEER_READY",
	1: "CLIENT_FILE_CANCEL",
	2: "CLIENT_FILE_REFUSE",
	3: "CLIENT_FILE_DONE",
}
var ClientFileState_value = map[string]int32{
	"CLIENT_FILE_PEER_READY": 0,
	"CLIENT_FILE_CANCEL":     1,
	"CLIENT_FILE_REFUSE":     2,
	"CLIENT_FILE_DONE":       3,
}

func (x ClientFileState) Enum() *ClientFileState {
	p := new(ClientFileState)
	*p = x
	return p
}
func (x ClientFileState) String() string {
	return proto.EnumName(ClientFileState_name, int32(x))
}
func (x *ClientFileState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileState_value, data, "ClientFileState")
	if err != nil {
		return err
	}
	*x = ClientFileState(value)
	return nil
}
func (ClientFileState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type ClientFileRole int32

const (
	ClientFileRole_CLIENT_REALTIME_SENDER  ClientFileRole = 1
	ClientFileRole_CLIENT_REALTIME_RECVER  ClientFileRole = 2
	ClientFileRole_CLIENT_OFFLINE_UPLOAD   ClientFileRole = 3
	ClientFileRole_CLIENT_OFFLINE_DOWNLOAD ClientFileRole = 4
)

var ClientFileRole_name = map[int32]string{
	1: "CLIENT_REALTIME_SENDER",
	2: "CLIENT_REALTIME_RECVER",
	3: "CLIENT_OFFLINE_UPLOAD",
	4: "CLIENT_OFFLINE_DOWNLOAD",
}
var ClientFileRole_value = map[string]int32{
	"CLIENT_REALTIME_SENDER":  1,
	"CLIENT_REALTIME_RECVER":  2,
	"CLIENT_OFFLINE_UPLOAD":   3,
	"CLIENT_OFFLINE_DOWNLOAD": 4,
}

func (x ClientFileRole) Enum() *ClientFileRole {
	p := new(ClientFileRole)
	*p = x
	return p
}
func (x ClientFileRole) String() string {
	return proto.EnumName(ClientFileRole_name, int32(x))
}
func (x *ClientFileRole) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileRole_value, data, "ClientFileRole")
	if err != nil {
		return err
	}
	*x = ClientFileRole(value)
	return nil
}
func (ClientFileRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type FileServerError int32

const (
	FileServerError_FILE_SERVER_ERRNO_OK                               FileServerError = 0
	FileServerError_FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR             FileServerError = 1
	FileServerError_FILE_SERVER_ERRNO_CREATE_TASK_ERROR                FileServerError = 2
	FileServerError_FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN              FileServerError = 3
	FileServerError_FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK            FileServerError = 4
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID   FileServerError = 5
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER          FileServerError = 6
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR            FileServerError = 7
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR        FileServerError = 8
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR FileServerError = 9
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR        FileServerError = 10
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR      FileServerError = 11
	FileServerError_FILE_SERVER_ERRNO_PULL_DATA_FINISHED               FileServerError = 12
)

var FileServerError_name = map[int32]string{
	0:  "FILE_SERVER_ERRNO_OK",
	1:  "FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR",
	2:  "FILE_SERVER_ERRNO_CREATE_TASK_ERROR",
	3:  "FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN",
	4:  "FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK",
	5:  "FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID",
	6:  "FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER",
	7:  "FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR",
	8:  "FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR",
	9:  "FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR",
	10: "FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR",
	11: "FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR",
	12: "FILE_SERVER_ERRNO_PULL_DATA_FINISHED",
}
var FileServerError_value = map[string]int32{
	"FILE_SERVER_ERRNO_OK":                               0,
	"FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR":             1,
	"FILE_SERVER_ERRNO_CREATE_TASK_ERROR":                2,
	"FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN":              3,
	"FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK":            4,
	"FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID":   5,
	"FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER":          6,
	"FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR":            7,
	"FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR":        8,
	"FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR": 9,
	"FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR":        10,
	"FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR":      11,
	"FILE_SERVER_ERRNO_PULL_DATA_FINISHED":               12,
}

func (x FileServerError) Enum() *FileServerError {
	p := new(FileServerError)
	*p = x
	return p
}
func (x FileServerError) String() string {
	return proto.EnumName(FileServerError_name, int32(x))
}
func (x *FileServerError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileServerError_value, data, "FileServerError")
	if err != nil {
		return err
	}
	*x = FileServerError(value)
	return nil
}
func (FileServerError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type SessionStatusType int32

const (
	SessionStatusType_SESSION_STATUS_OK     SessionStatusType = 0
	SessionStatusType_SESSION_STATUS_DELETE SessionStatusType = 1
)

var SessionStatusType_name = map[int32]string{
	0: "SESSION_STATUS_OK",
	1: "SESSION_STATUS_DELETE",
}
var SessionStatusType_value = map[string]int32{
	"SESSION_STATUS_OK":     0,
	"SESSION_STATUS_DELETE": 1,
}

func (x SessionStatusType) Enum() *SessionStatusType {
	p := new(SessionStatusType)
	*p = x
	return p
}
func (x SessionStatusType) String() string {
	return proto.EnumName(SessionStatusType_name, int32(x))
}
func (x *SessionStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionStatusType_value, data, "SessionStatusType")
	if err != nil {
		return err
	}
	*x = SessionStatusType(value)
	return nil
}
func (SessionStatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type DepartmentStatusType int32

const (
	DepartmentStatusType_DEPT_STATUS_OK     DepartmentStatusType = 0
	DepartmentStatusType_DEPT_STATUS_DELETE DepartmentStatusType = 1
)

var DepartmentStatusType_name = map[int32]string{
	0: "DEPT_STATUS_OK",
	1: "DEPT_STATUS_DELETE",
}
var DepartmentStatusType_value = map[string]int32{
	"DEPT_STATUS_OK":     0,
	"DEPT_STATUS_DELETE": 1,
}

func (x DepartmentStatusType) Enum() *DepartmentStatusType {
	p := new(DepartmentStatusType)
	*p = x
	return p
}
func (x DepartmentStatusType) String() string {
	return proto.EnumName(DepartmentStatusType_name, int32(x))
}
func (x *DepartmentStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DepartmentStatusType_value, data, "DepartmentStatusType")
	if err != nil {
		return err
	}
	*x = DepartmentStatusType(value)
	return nil
}
func (DepartmentStatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type IpAddr struct {
	Ip               *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port             *uint32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IpAddr) Reset()                    { *m = IpAddr{} }
func (m *IpAddr) String() string            { return proto.CompactTextString(m) }
func (*IpAddr) ProtoMessage()               {}
func (*IpAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IpAddr) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *IpAddr) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type UserInfo struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	UserGender       *uint32 `protobuf:"varint,2,req,name=user_gender" json:"user_gender,omitempty"`
	UserNickName     *string `protobuf:"bytes,3,req,name=user_nick_name" json:"user_nick_name,omitempty"`
	AvatarUrl        *string `protobuf:"bytes,4,req,name=avatar_url" json:"avatar_url,omitempty"`
	DepartmentId     *uint32 `protobuf:"varint,5,req,name=department_id" json:"department_id,omitempty"`
	Email            *string `protobuf:"bytes,6,req,name=email" json:"email,omitempty"`
	UserRealName     *string `protobuf:"bytes,7,req,name=user_real_name" json:"user_real_name,omitempty"`
	UserTel          *string `protobuf:"bytes,8,req,name=user_tel" json:"user_tel,omitempty"`
	UserDomain       *string `protobuf:"bytes,9,req,name=user_domain" json:"user_domain,omitempty"`
	Status           *uint32 `protobuf:"varint,10,req,name=status" json:"status,omitempty"`
	SignInfo         *string `protobuf:"bytes,11,opt,name=sign_info" json:"sign_info,omitempty"`
	CustomerId       *uint32 `protobuf:"varint,12,opt,name=customer_id" json:"customer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserInfo) GetUserGender() uint32 {
	if m != nil && m.UserGender != nil {
		return *m.UserGender
	}
	return 0
}

func (m *UserInfo) GetUserNickName() string {
	if m != nil && m.UserNickName != nil {
		return *m.UserNickName
	}
	return ""
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil && m.AvatarUrl != nil {
		return *m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetDepartmentId() uint32 {
	if m != nil && m.DepartmentId != nil {
		return *m.DepartmentId
	}
	return 0
}

func (m *UserInfo) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *UserInfo) GetUserRealName() string {
	if m != nil && m.UserRealName != nil {
		return *m.UserRealName
	}
	return ""
}

func (m *UserInfo) GetUserTel() string {
	if m != nil && m.UserTel != nil {
		return *m.UserTel
	}
	return ""
}

func (m *UserInfo) GetUserDomain() string {
	if m != nil && m.UserDomain != nil {
		return *m.UserDomain
	}
	return ""
}

func (m *UserInfo) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *UserInfo) GetSignInfo() string {
	if m != nil && m.SignInfo != nil {
		return *m.SignInfo
	}
	return ""
}

func (m *UserInfo) GetCustomerId() uint32 {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return 0
}

type ContactSessionInfo struct {
	SessionId           *uint32            `protobuf:"varint,1,req,name=session_id" json:"session_id,omitempty"`
	SessionType         *SessionType       `protobuf:"varint,2,req,name=session_type,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	SessionStatus       *SessionStatusType `protobuf:"varint,3,req,name=session_status,enum=IM.BaseDefine.SessionStatusType" json:"session_status,omitempty"`
	UpdatedTime         *uint32            `protobuf:"varint,4,req,name=updated_time" json:"updated_time,omitempty"`
	LatestMsgId         *uint32            `protobuf:"varint,5,req,name=latest_msg_id" json:"latest_msg_id,omitempty"`
	LatestMsgData       []byte             `protobuf:"bytes,6,req,name=latest_msg_data" json:"latest_msg_data,omitempty"`
	LatestMsgType       *MsgType           `protobuf:"varint,7,req,name=latest_msg_type,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId *uint32            `protobuf:"varint,8,req,name=latest_msg_from_user_id" json:"latest_msg_from_user_id,omitempty"`
	LastReadMsgId       *uint32            `protobuf:"varint,9,opt,name=last_read_msg_id" json:"last_read_msg_id,omitempty"`
	XXX_unrecognized    []byte             `json:"-"`
}

func (m *ContactSessionInfo) Reset()                    { *m = ContactSessionInfo{} }
func (m *ContactSessionInfo) String() string            { return proto.CompactTextString(m) }
func (*ContactSessionInfo) ProtoMessage()               {}
func (*ContactSessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContactSessionInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ContactSessionInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *ContactSessionInfo) GetSessionStatus() SessionStatusType {
	if m != nil && m.SessionStatus != nil {
		return *m.SessionStatus
	}
	return SessionStatusType_SESSION_STATUS_OK
}

func (m *ContactSessionInfo) GetUpdatedTime() uint32 {
	if m != nil && m.UpdatedTime != nil {
		return *m.UpdatedTime
	}
	return 0
}

func (m *ContactSessionInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *ContactSessionInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *ContactSessionInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *ContactSessionInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

func (m *ContactSessionInfo) GetLastReadMsgId() uint32 {
	if m != nil && m.LastReadMsgId != nil {
		return *m.LastReadMsgId
	}
	return 0
}

type UserStat struct {
	UserId           *uint32       `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	Status           *UserStatType `protobuf:"varint,2,req,name=status,enum=IM.BaseDefine.UserStatType" json:"status,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *UserStat) Reset()                    { *m = UserStat{} }
func (m *UserStat) String() string            { return proto.CompactTextString(m) }
func (*UserStat) ProtoMessage()               {}
func (*UserStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserStat) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserStat) GetStatus() UserStatType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserStatType_USER_STATUS_ONLINE
}

type ServerUserStat struct {
	UserId           *uint32       `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	Status           *UserStatType `protobuf:"varint,2,req,name=status,enum=IM.BaseDefine.UserStatType" json:"status,omitempty"`
	ClientType       *ClientType   `protobuf:"varint,3,req,name=client_type,enum=IM.BaseDefine.ClientType" json:"client_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ServerUserStat) Reset()                    { *m = ServerUserStat{} }
func (m *ServerUserStat) String() string            { return proto.CompactTextString(m) }
func (*ServerUserStat) ProtoMessage()               {}
func (*ServerUserStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServerUserStat) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ServerUserStat) GetStatus() UserStatType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserStatType_USER_STATUS_ONLINE
}

func (m *ServerUserStat) GetClientType() ClientType {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return ClientType_CLIENT_TYPE_WINDOWS
}

type UnreadInfo struct {
	SessionId            *uint32      `protobuf:"varint,1,req,name=session_id" json:"session_id,omitempty"`
	SessionType          *SessionType `protobuf:"varint,2,req,name=session_type,enum=IM.BaseDefine.SessionType" json:"session_type,omitempty"`
	UnreadCnt            *uint32      `protobuf:"varint,3,req,name=unread_cnt" json:"unread_cnt,omitempty"`
	LatestMsgId          *uint32      `protobuf:"varint,4,req,name=latest_msg_id" json:"latest_msg_id,omitempty"`
	LatestMsgData        []byte       `protobuf:"bytes,5,req,name=latest_msg_data" json:"latest_msg_data,omitempty"`
	LatestMsgType        *MsgType     `protobuf:"varint,6,req,name=latest_msg_type,enum=IM.BaseDefine.MsgType" json:"latest_msg_type,omitempty"`
	LatestMsgFromUserId  *uint32      `protobuf:"varint,7,req,name=latest_msg_from_user_id" json:"latest_msg_from_user_id,omitempty"`
	LatestMsgTypeEx      *uint32      `protobuf:"varint,8,opt,name=latest_msg_type_ex" json:"latest_msg_type_ex,omitempty"`
	LatestFromCustomerId *uint32      `protobuf:"varint,9,opt,name=latest_from_customer_id" json:"latest_from_customer_id,omitempty"`
	XXX_unrecognized     []byte       `json:"-"`
}

func (m *UnreadInfo) Reset()                    { *m = UnreadInfo{} }
func (m *UnreadInfo) String() string            { return proto.CompactTextString(m) }
func (*UnreadInfo) ProtoMessage()               {}
func (*UnreadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UnreadInfo) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *UnreadInfo) GetSessionType() SessionType {
	if m != nil && m.SessionType != nil {
		return *m.SessionType
	}
	return SessionType_SESSION_TYPE_SINGLE
}

func (m *UnreadInfo) GetUnreadCnt() uint32 {
	if m != nil && m.UnreadCnt != nil {
		return *m.UnreadCnt
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgId() uint32 {
	if m != nil && m.LatestMsgId != nil {
		return *m.LatestMsgId
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgData() []byte {
	if m != nil {
		return m.LatestMsgData
	}
	return nil
}

func (m *UnreadInfo) GetLatestMsgType() MsgType {
	if m != nil && m.LatestMsgType != nil {
		return *m.LatestMsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *UnreadInfo) GetLatestMsgFromUserId() uint32 {
	if m != nil && m.LatestMsgFromUserId != nil {
		return *m.LatestMsgFromUserId
	}
	return 0
}

func (m *UnreadInfo) GetLatestMsgTypeEx() uint32 {
	if m != nil && m.LatestMsgTypeEx != nil {
		return *m.LatestMsgTypeEx
	}
	return 0
}

func (m *UnreadInfo) GetLatestFromCustomerId() uint32 {
	if m != nil && m.LatestFromCustomerId != nil {
		return *m.LatestFromCustomerId
	}
	return 0
}

type MsgInfo struct {
	MsgId            *uint32  `protobuf:"varint,1,req,name=msg_id" json:"msg_id,omitempty"`
	FromSessionId    *uint32  `protobuf:"varint,2,req,name=from_session_id" json:"from_session_id,omitempty"`
	CreateTime       *uint32  `protobuf:"varint,3,req,name=create_time" json:"create_time,omitempty"`
	MsgType          *MsgType `protobuf:"varint,4,req,name=msg_type,enum=IM.BaseDefine.MsgType" json:"msg_type,omitempty"`
	MsgData          []byte   `protobuf:"bytes,5,req,name=msg_data" json:"msg_data,omitempty"`
	MsgTypeEx        *uint32  `protobuf:"varint,6,opt,name=msg_type_ex" json:"msg_type_ex,omitempty"`
	FromSubId        *uint32  `protobuf:"varint,7,opt,name=from_sub_id" json:"from_sub_id,omitempty"`
	ToSubId          *uint32  `protobuf:"varint,8,opt,name=to_sub_id" json:"to_sub_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgInfo) Reset()                    { *m = MsgInfo{} }
func (m *MsgInfo) String() string            { return proto.CompactTextString(m) }
func (*MsgInfo) ProtoMessage()               {}
func (*MsgInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MsgInfo) GetMsgId() uint32 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

func (m *MsgInfo) GetFromSessionId() uint32 {
	if m != nil && m.FromSessionId != nil {
		return *m.FromSessionId
	}
	return 0
}

func (m *MsgInfo) GetCreateTime() uint32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MsgInfo) GetMsgType() MsgType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return MsgType_MSG_TYPE_SINGLE_TEXT
}

func (m *MsgInfo) GetMsgData() []byte {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func (m *MsgInfo) GetMsgTypeEx() uint32 {
	if m != nil && m.MsgTypeEx != nil {
		return *m.MsgTypeEx
	}
	return 0
}

func (m *MsgInfo) GetFromSubId() uint32 {
	if m != nil && m.FromSubId != nil {
		return *m.FromSubId
	}
	return 0
}

func (m *MsgInfo) GetToSubId() uint32 {
	if m != nil && m.ToSubId != nil {
		return *m.ToSubId
	}
	return 0
}

type GroupVersionInfo struct {
	GroupId          *uint32 `protobuf:"varint,1,req,name=group_id" json:"group_id,omitempty"`
	Version          *uint32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupVersionInfo) Reset()                    { *m = GroupVersionInfo{} }
func (m *GroupVersionInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupVersionInfo) ProtoMessage()               {}
func (*GroupVersionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GroupVersionInfo) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *GroupVersionInfo) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type GroupInfo struct {
	GroupId          *uint32    `protobuf:"varint,1,req,name=group_id" json:"group_id,omitempty"`
	Version          *uint32    `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	GroupName        *string    `protobuf:"bytes,3,req,name=group_name" json:"group_name,omitempty"`
	GroupAvatar      *string    `protobuf:"bytes,4,req,name=group_avatar" json:"group_avatar,omitempty"`
	GroupCreatorId   *uint32    `protobuf:"varint,5,req,name=group_creator_id" json:"group_creator_id,omitempty"`
	GroupType        *GroupType `protobuf:"varint,6,req,name=group_type,enum=IM.BaseDefine.GroupType" json:"group_type,omitempty"`
	ShieldStatus     *uint32    `protobuf:"varint,7,req,name=shield_status" json:"shield_status,omitempty"`
	GroupMemberList  []uint32   `protobuf:"varint,8,rep,name=group_member_list" json:"group_member_list,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GroupInfo) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *GroupInfo) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *GroupInfo) GetGroupAvatar() string {
	if m != nil && m.GroupAvatar != nil {
		return *m.GroupAvatar
	}
	return ""
}

func (m *GroupInfo) GetGroupCreatorId() uint32 {
	if m != nil && m.GroupCreatorId != nil {
		return *m.GroupCreatorId
	}
	return 0
}

func (m *GroupInfo) GetGroupType() GroupType {
	if m != nil && m.GroupType != nil {
		return *m.GroupType
	}
	return GroupType_GROUP_TYPE_NORMAL
}

func (m *GroupInfo) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

func (m *GroupInfo) GetGroupMemberList() []uint32 {
	if m != nil {
		return m.GroupMemberList
	}
	return nil
}

type UserTokenInfo struct {
	UserId           *uint32     `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	UserType         *ClientType `protobuf:"varint,2,req,name=user_type,enum=IM.BaseDefine.ClientType" json:"user_type,omitempty"`
	Token            *string     `protobuf:"bytes,3,req,name=token" json:"token,omitempty"`
	PushCount        *uint32     `protobuf:"varint,4,req,name=push_count" json:"push_count,omitempty"`
	PushType         *uint32     `protobuf:"varint,5,req,name=push_type" json:"push_type,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *UserTokenInfo) Reset()                    { *m = UserTokenInfo{} }
func (m *UserTokenInfo) String() string            { return proto.CompactTextString(m) }
func (*UserTokenInfo) ProtoMessage()               {}
func (*UserTokenInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserTokenInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserTokenInfo) GetUserType() ClientType {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return ClientType_CLIENT_TYPE_WINDOWS
}

func (m *UserTokenInfo) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *UserTokenInfo) GetPushCount() uint32 {
	if m != nil && m.PushCount != nil {
		return *m.PushCount
	}
	return 0
}

func (m *UserTokenInfo) GetPushType() uint32 {
	if m != nil && m.PushType != nil {
		return *m.PushType
	}
	return 0
}

type PushResult struct {
	UserToken        *string `protobuf:"bytes,1,req,name=user_token" json:"user_token,omitempty"`
	ResultCode       *uint32 `protobuf:"varint,2,req,name=result_code" json:"result_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PushResult) Reset()                    { *m = PushResult{} }
func (m *PushResult) String() string            { return proto.CompactTextString(m) }
func (*PushResult) ProtoMessage()               {}
func (*PushResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PushResult) GetUserToken() string {
	if m != nil && m.UserToken != nil {
		return *m.UserToken
	}
	return ""
}

func (m *PushResult) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

type ShieldStatus struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	GroupId          *uint32 `protobuf:"varint,2,req,name=group_id" json:"group_id,omitempty"`
	ShieldStatus     *uint32 `protobuf:"varint,3,req,name=shield_status" json:"shield_status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShieldStatus) Reset()                    { *m = ShieldStatus{} }
func (m *ShieldStatus) String() string            { return proto.CompactTextString(m) }
func (*ShieldStatus) ProtoMessage()               {}
func (*ShieldStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ShieldStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ShieldStatus) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *ShieldStatus) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

type OfflineFileInfo struct {
	FromUserId       *uint32 `protobuf:"varint,1,req,name=from_user_id" json:"from_user_id,omitempty"`
	TaskId           *string `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	FileName         *string `protobuf:"bytes,3,req,name=file_name" json:"file_name,omitempty"`
	FileSize         *uint32 `protobuf:"varint,4,req,name=file_size" json:"file_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OfflineFileInfo) Reset()                    { *m = OfflineFileInfo{} }
func (m *OfflineFileInfo) String() string            { return proto.CompactTextString(m) }
func (*OfflineFileInfo) ProtoMessage()               {}
func (*OfflineFileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *OfflineFileInfo) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *OfflineFileInfo) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *OfflineFileInfo) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *OfflineFileInfo) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

type DepartInfo struct {
	DeptId           *uint32               `protobuf:"varint,1,req,name=dept_id" json:"dept_id,omitempty"`
	Priority         *uint32               `protobuf:"varint,2,req,name=priority" json:"priority,omitempty"`
	DeptName         *string               `protobuf:"bytes,3,req,name=dept_name" json:"dept_name,omitempty"`
	ParentDeptId     *uint32               `protobuf:"varint,4,req,name=parent_dept_id" json:"parent_dept_id,omitempty"`
	DeptStatus       *DepartmentStatusType `protobuf:"varint,5,req,name=dept_status,enum=IM.BaseDefine.DepartmentStatusType" json:"dept_status,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *DepartInfo) Reset()                    { *m = DepartInfo{} }
func (m *DepartInfo) String() string            { return proto.CompactTextString(m) }
func (*DepartInfo) ProtoMessage()               {}
func (*DepartInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DepartInfo) GetDeptId() uint32 {
	if m != nil && m.DeptId != nil {
		return *m.DeptId
	}
	return 0
}

func (m *DepartInfo) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *DepartInfo) GetDeptName() string {
	if m != nil && m.DeptName != nil {
		return *m.DeptName
	}
	return ""
}

func (m *DepartInfo) GetParentDeptId() uint32 {
	if m != nil && m.ParentDeptId != nil {
		return *m.ParentDeptId
	}
	return 0
}

func (m *DepartInfo) GetDeptStatus() DepartmentStatusType {
	if m != nil && m.DeptStatus != nil {
		return *m.DeptStatus
	}
	return DepartmentStatusType_DEPT_STATUS_OK
}

type PushShieldStatus struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	ShieldStatus     *uint32 `protobuf:"varint,2,req,name=shield_status" json:"shield_status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PushShieldStatus) Reset()                    { *m = PushShieldStatus{} }
func (m *PushShieldStatus) String() string            { return proto.CompactTextString(m) }
func (*PushShieldStatus) ProtoMessage()               {}
func (*PushShieldStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PushShieldStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PushShieldStatus) GetShieldStatus() uint32 {
	if m != nil && m.ShieldStatus != nil {
		return *m.ShieldStatus
	}
	return 0
}

type MsgAckType struct {
	MsgId            *uint32 `protobuf:"varint,1,req,name=msg_id" json:"msg_id,omitempty"`
	FromId           *uint32 `protobuf:"varint,2,req,name=from_id" json:"from_id,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgAckType) Reset()                    { *m = MsgAckType{} }
func (m *MsgAckType) String() string            { return proto.CompactTextString(m) }
func (*MsgAckType) ProtoMessage()               {}
func (*MsgAckType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MsgAckType) GetMsgId() uint32 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

func (m *MsgAckType) GetFromId() uint32 {
	if m != nil && m.FromId != nil {
		return *m.FromId
	}
	return 0
}

func (m *MsgAckType) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

// 子账号的接待状态
type SubUserStatus struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id" json:"user_id,omitempty"`
	Status           *uint32 `protobuf:"varint,2,req,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubUserStatus) Reset()                    { *m = SubUserStatus{} }
func (m *SubUserStatus) String() string            { return proto.CompactTextString(m) }
func (*SubUserStatus) ProtoMessage()               {}
func (*SubUserStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SubUserStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SubUserStatus) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// customer
type CustomerInfo struct {
	CustomerId       *uint32          `protobuf:"varint,1,req,name=customer_id" json:"customer_id,omitempty"`
	Name             []byte           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Avatar           []byte           `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	SubUsersList     []*SubUserStatus `protobuf:"bytes,4,rep,name=sub_users_list" json:"sub_users_list,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CustomerInfo) Reset()                    { *m = CustomerInfo{} }
func (m *CustomerInfo) String() string            { return proto.CompactTextString(m) }
func (*CustomerInfo) ProtoMessage()               {}
func (*CustomerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CustomerInfo) GetCustomerId() uint32 {
	if m != nil && m.CustomerId != nil {
		return *m.CustomerId
	}
	return 0
}

func (m *CustomerInfo) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CustomerInfo) GetAvatar() []byte {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *CustomerInfo) GetSubUsersList() []*SubUserStatus {
	if m != nil {
		return m.SubUsersList
	}
	return nil
}

func init() {
	proto.RegisterType((*IpAddr)(nil), "IM.BaseDefine.IpAddr")
	proto.RegisterType((*UserInfo)(nil), "IM.BaseDefine.UserInfo")
	proto.RegisterType((*ContactSessionInfo)(nil), "IM.BaseDefine.ContactSessionInfo")
	proto.RegisterType((*UserStat)(nil), "IM.BaseDefine.UserStat")
	proto.RegisterType((*ServerUserStat)(nil), "IM.BaseDefine.ServerUserStat")
	proto.RegisterType((*UnreadInfo)(nil), "IM.BaseDefine.UnreadInfo")
	proto.RegisterType((*MsgInfo)(nil), "IM.BaseDefine.MsgInfo")
	proto.RegisterType((*GroupVersionInfo)(nil), "IM.BaseDefine.GroupVersionInfo")
	proto.RegisterType((*GroupInfo)(nil), "IM.BaseDefine.GroupInfo")
	proto.RegisterType((*UserTokenInfo)(nil), "IM.BaseDefine.UserTokenInfo")
	proto.RegisterType((*PushResult)(nil), "IM.BaseDefine.PushResult")
	proto.RegisterType((*ShieldStatus)(nil), "IM.BaseDefine.ShieldStatus")
	proto.RegisterType((*OfflineFileInfo)(nil), "IM.BaseDefine.OfflineFileInfo")
	proto.RegisterType((*DepartInfo)(nil), "IM.BaseDefine.DepartInfo")
	proto.RegisterType((*PushShieldStatus)(nil), "IM.BaseDefine.PushShieldStatus")
	proto.RegisterType((*MsgAckType)(nil), "IM.BaseDefine.MsgAckType")
	proto.RegisterType((*SubUserStatus)(nil), "IM.BaseDefine.SubUserStatus")
	proto.RegisterType((*CustomerInfo)(nil), "IM.BaseDefine.CustomerInfo")
	proto.RegisterEnum("IM.BaseDefine.ServiceID", ServiceID_name, ServiceID_value)
	proto.RegisterEnum("IM.BaseDefine.LoginCmdID", LoginCmdID_name, LoginCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.BuddyListCmdID", BuddyListCmdID_name, BuddyListCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.MessageCmdID", MessageCmdID_name, MessageCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.GroupCmdID", GroupCmdID_name, GroupCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.FileCmdID", FileCmdID_name, FileCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.SwitchServiceCmdID", SwitchServiceCmdID_name, SwitchServiceCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.OtherCmdID", OtherCmdID_name, OtherCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.ControlCmdID", ControlCmdID_name, ControlCmdID_value)
	proto.RegisterEnum("IM.BaseDefine.CustomerCmdId", CustomerCmdId_name, CustomerCmdId_value)
	proto.RegisterEnum("IM.BaseDefine.ResultType", ResultType_name, ResultType_value)
	proto.RegisterEnum("IM.BaseDefine.KickReasonType", KickReasonType_name, KickReasonType_value)
	proto.RegisterEnum("IM.BaseDefine.OnlineListType", OnlineListType_name, OnlineListType_value)
	proto.RegisterEnum("IM.BaseDefine.UserStatType", UserStatType_name, UserStatType_value)
	proto.RegisterEnum("IM.BaseDefine.SessionType", SessionType_name, SessionType_value)
	proto.RegisterEnum("IM.BaseDefine.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("IM.BaseDefine.ClientType", ClientType_name, ClientType_value)
	proto.RegisterEnum("IM.BaseDefine.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("IM.BaseDefine.GroupModifyType", GroupModifyType_name, GroupModifyType_value)
	proto.RegisterEnum("IM.BaseDefine.TransferFileType", TransferFileType_name, TransferFileType_value)
	proto.RegisterEnum("IM.BaseDefine.ClientFileState", ClientFileState_name, ClientFileState_value)
	proto.RegisterEnum("IM.BaseDefine.ClientFileRole", ClientFileRole_name, ClientFileRole_value)
	proto.RegisterEnum("IM.BaseDefine.FileServerError", FileServerError_name, FileServerError_value)
	proto.RegisterEnum("IM.BaseDefine.SessionStatusType", SessionStatusType_name, SessionStatusType_value)
	proto.RegisterEnum("IM.BaseDefine.DepartmentStatusType", DepartmentStatusType_name, DepartmentStatusType_value)
}

func init() { proto.RegisterFile("IM.BaseDefine.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x5a, 0xcb, 0x73, 0xdb, 0xd6,
	0xb9, 0x0f, 0x29, 0x8a, 0xa2, 0x3e, 0x51, 0xd4, 0xd1, 0x91, 0x25, 0xd1, 0x8f, 0xc4, 0x8a, 0xec,
	0xc4, 0x32, 0x13, 0x2b, 0xb9, 0xbe, 0x49, 0x26, 0x73, 0x17, 0xf7, 0x5e, 0x08, 0x38, 0x92, 0x30,
	0x02, 0x01, 0x04, 0x00, 0xe5, 0x68, 0x53, 0x0c, 0x2d, 0x42, 0x32, 0x6b, 0x8a, 0x54, 0x09, 0x30,
	0xa9, 0xbb, 0xe8, 0x54, 0x7e, 0x3f, 0xe3, 0x24, 0x4d, 0xdb, 0x99, 0xee, 0xfb, 0x07, 0xf4, 0xbd,
	0xed, 0xaa, 0xbb, 0x6e, 0xba, 0xed, 0xaa, 0x9b, 0x4e, 0xb7, 0x5d, 0x76, 0xd3, 0xe9, 0x9c, 0x17,
	0x09, 0x80, 0x34, 0xed, 0xe9, 0x64, 0x27, 0x7c, 0xdf, 0xef, 0x7b, 0x3f, 0x70, 0x0e, 0x28, 0x58,
	0xd0, 0xab, 0xeb, 0x1b, 0xf5, 0x30, 0xd0, 0x82, 0x83, 0x66, 0x3b, 0x58, 0x3f, 0xee, 0x76, 0xa2,
	0x0e, 0x9e, 0x4d, 0x10, 0x57, 0x57, 0x21, 0xaf, 0x1f, 0x2b, 0x8d, 0x46, 0x17, 0x03, 0x64, 0x9b,
	0xc7, 0xe5, 0xcc, 0x4a, 0x76, 0x6d, 0x1a, 0x17, 0x21, 0x77, 0xdc, 0xe9, 0x46, 0xe5, 0xec, 0x4a,
	0x76, 0x6d, 0x76, 0xf5, 0x9f, 0x19, 0x28, 0xd4, 0xc2, 0xa0, 0xab, 0xb7, 0x0f, 0x3a, 0x78, 0x0e,
	0xa6, 0x7a, 0x61, 0xd0, 0xf5, 0x9b, 0x0d, 0x86, 0x9d, 0xc5, 0x0b, 0x30, 0xc3, 0x08, 0x87, 0x41,
	0xbb, 0x11, 0x74, 0xb9, 0x08, 0x5e, 0x82, 0x12, 0x23, 0xb6, 0x9b, 0xfb, 0x37, 0xfd, 0x76, 0xfd,
	0x28, 0x28, 0x4f, 0x30, 0xc5, 0x18, 0xa0, 0xfe, 0x59, 0x3d, 0xaa, 0x77, 0xfd, 0x5e, 0xb7, 0x55,
	0xce, 0x31, 0xda, 0x22, 0xcc, 0x36, 0x82, 0xe3, 0x7a, 0x37, 0x3a, 0x0a, 0xda, 0x11, 0xd5, 0x3b,
	0xc9, 0x54, 0xcc, 0xc2, 0x64, 0x70, 0x54, 0x6f, 0xb6, 0xca, 0x79, 0x86, 0x92, 0x1a, 0xbb, 0x41,
	0xbd, 0xc5, 0x35, 0x4e, 0x31, 0x3a, 0x82, 0x02, 0xa3, 0x47, 0x41, 0xab, 0x5c, 0x60, 0x14, 0xe9,
	0x50, 0xa3, 0x73, 0x54, 0x6f, 0xb6, 0xcb, 0xd3, 0x8c, 0x58, 0x82, 0x7c, 0x18, 0xd5, 0xa3, 0x5e,
	0x58, 0x06, 0xa6, 0x7d, 0x1e, 0xa6, 0xc3, 0xe6, 0x61, 0xdb, 0x6f, 0xb6, 0x0f, 0x3a, 0xe5, 0x99,
	0x95, 0x0c, 0x97, 0xdb, 0xef, 0x85, 0x51, 0xe7, 0x88, 0x47, 0x57, 0x5c, 0xc9, 0xac, 0xcd, 0xae,
	0xfe, 0x31, 0x0b, 0x58, 0xed, 0xb4, 0xa3, 0xfa, 0x7e, 0xe4, 0x06, 0x61, 0xd8, 0xec, 0xb4, 0x59,
	0x16, 0x30, 0x40, 0xc8, 0x1f, 0x07, 0x89, 0x78, 0x1f, 0x8a, 0x92, 0x16, 0xdd, 0x3a, 0x0e, 0x58,
	0x26, 0x4a, 0x57, 0xcf, 0xac, 0x27, 0xab, 0x20, 0xb4, 0x78, 0xb7, 0x8e, 0x03, 0xfc, 0x31, 0x94,
	0xa4, 0x84, 0x70, 0x6e, 0x82, 0xc9, 0xac, 0x8c, 0x96, 0x71, 0x19, 0x86, 0x49, 0x9e, 0x82, 0x62,
	0xef, 0xb8, 0x51, 0x8f, 0x82, 0x86, 0x1f, 0x35, 0x8f, 0x02, 0x96, 0xc9, 0x59, 0x9a, 0xc9, 0x56,
	0x3d, 0x0a, 0xc2, 0xc8, 0x3f, 0x0a, 0x0f, 0x07, 0x99, 0x5c, 0x86, 0xb9, 0x18, 0xb9, 0x51, 0x8f,
	0xea, 0x2c, 0xa7, 0x45, 0xfc, 0x5e, 0x82, 0xc1, 0x9c, 0x9e, 0x62, 0x0e, 0x2c, 0xa5, 0x1c, 0xa8,
	0x86, 0x87, 0xcc, 0xec, 0x79, 0x58, 0x8e, 0x09, 0x1c, 0x74, 0x3b, 0x47, 0xbe, 0x6c, 0x86, 0x02,
	0x33, 0x55, 0x06, 0xd4, 0xaa, 0x87, 0x11, 0xad, 0x52, 0x43, 0x3a, 0x31, 0xcd, 0x12, 0xb9, 0xcd,
	0x7b, 0x88, 0xc6, 0x30, 0xdc, 0x43, 0xef, 0xf4, 0xab, 0xc3, 0x93, 0x76, 0x36, 0x65, 0x5f, 0x4a,
	0x52, 0x27, 0x56, 0x7f, 0x08, 0x25, 0x37, 0xe8, 0x7e, 0x16, 0x74, 0xbf, 0x1d, 0x7d, 0x78, 0x1d,
	0x66, 0xf6, 0x5b, 0x4d, 0xda, 0x7b, 0x2c, 0x03, 0xbc, 0x04, 0xa7, 0x53, 0x12, 0x2a, 0x43, 0x30,
	0xfb, 0xbf, 0xc8, 0x02, 0xd4, 0xda, 0x34, 0xc2, 0x6f, 0xb1, 0x15, 0x30, 0x40, 0x8f, 0xe9, 0xf4,
	0xf7, 0xdb, 0x11, 0xf3, 0x61, 0x44, 0x39, 0x73, 0x2f, 0x2a, 0xe7, 0xe4, 0x8b, 0xca, 0x99, 0xff,
	0x4f, 0xcb, 0x39, 0xc5, 0x4c, 0x9d, 0x01, 0x9c, 0xd2, 0xe8, 0x07, 0xdf, 0x2f, 0x17, 0x68, 0x41,
	0x63, 0xc2, 0x4c, 0x30, 0x3e, 0x3a, 0xbc, 0xe2, 0x7f, 0xc8, 0xc0, 0x54, 0x35, 0x3c, 0x64, 0x49,
	0x2a, 0x41, 0x5e, 0xc4, 0x90, 0x91, 0x31, 0x30, 0xa9, 0x58, 0xe6, 0xb2, 0x72, 0x9b, 0xec, 0x77,
	0x83, 0x7a, 0x14, 0xf0, 0xbe, 0xe6, 0x89, 0x58, 0x83, 0x42, 0x3f, 0xa2, 0xdc, 0xd8, 0x88, 0x10,
	0x47, 0xc6, 0x92, 0xb2, 0x00, 0x33, 0x71, 0xdf, 0xf3, 0xcc, 0xf7, 0x05, 0x98, 0xe1, 0xe6, 0x7b,
	0xd7, 0x79, 0xb0, 0x19, 0xbe, 0x12, 0xa2, 0x8e, 0x24, 0xb1, 0x18, 0x57, 0x3f, 0x04, 0xb4, 0xd5,
	0xed, 0xf4, 0x8e, 0x77, 0x83, 0x6e, 0x7f, 0xf4, 0x11, 0x14, 0x0e, 0x29, 0x6d, 0x10, 0xcc, 0x1c,
	0x4c, 0x7d, 0xc6, 0x01, 0x62, 0x61, 0xfe, 0x39, 0x03, 0xd3, 0x4c, 0xee, 0x15, 0x05, 0x68, 0xf5,
	0x39, 0x24, 0xb6, 0x2a, 0x4f, 0x41, 0x91, 0xd3, 0xf8, 0xc2, 0x14, 0xcb, 0xb2, 0x0c, 0x88, 0x53,
	0x59, 0x96, 0x3a, 0xdd, 0xc1, 0x94, 0xbf, 0x2b, 0x75, 0xc4, 0x0a, 0x5f, 0x4e, 0xa5, 0x89, 0x39,
	0xc5, 0x12, 0xb5, 0x08, 0xb3, 0xe1, 0x8d, 0x66, 0xd0, 0x6a, 0xc8, 0xcd, 0xc3, 0x0b, 0x7e, 0x1a,
	0xe6, 0xb9, 0x92, 0xa3, 0xe0, 0xe8, 0x7a, 0xd0, 0xf5, 0x5b, 0xcd, 0x30, 0x2a, 0x17, 0x56, 0x26,
	0xd6, 0x66, 0x57, 0xef, 0x66, 0x60, 0x96, 0xce, 0x8d, 0xd7, 0xb9, 0x19, 0xb4, 0x47, 0xbf, 0x0a,
	0xde, 0x85, 0x69, 0xbe, 0x8b, 0x07, 0x3d, 0xff, 0xe2, 0x39, 0xa2, 0x0b, 0x3e, 0xa2, 0xba, 0x06,
	0xaf, 0x86, 0xe3, 0x5e, 0x78, 0xc3, 0xdf, 0xef, 0xf4, 0xda, 0x91, 0x68, 0xf5, 0x79, 0x98, 0x66,
	0x34, 0xa6, 0x90, 0x85, 0xb9, 0xfa, 0x21, 0x80, 0xdd, 0x0b, 0x6f, 0x38, 0x41, 0xd8, 0x6b, 0x45,
	0x6c, 0x6c, 0x98, 0x45, 0xa6, 0x28, 0x23, 0xf7, 0x7f, 0x97, 0x71, 0xfd, 0xfd, 0x4e, 0x23, 0x10,
	0x25, 0xd9, 0x86, 0xa2, 0xcb, 0xe2, 0xe5, 0x4b, 0x74, 0xd8, 0xf7, 0x78, 0x95, 0xb2, 0x72, 0xfc,
	0x92, 0x29, 0x62, 0xcd, 0xb8, 0xfa, 0x1d, 0x98, 0xb3, 0x0e, 0x0e, 0x5a, 0xcd, 0x76, 0xb0, 0xd9,
	0x6c, 0x05, 0x2c, 0x11, 0xa7, 0xa0, 0x98, 0x18, 0x9e, 0x7e, 0x95, 0xa3, 0x7a, 0x78, 0x53, 0x2a,
	0x9c, 0xa6, 0xd1, 0x1c, 0x34, 0x5b, 0x41, 0xbc, 0xc8, 0x92, 0x14, 0x36, 0x7f, 0x20, 0x96, 0xf8,
	0xea, 0x37, 0x19, 0x00, 0x8d, 0xbd, 0x0f, 0x65, 0x92, 0x1b, 0xc1, 0x71, 0x94, 0x70, 0xf4, 0xb8,
	0xdb, 0xec, 0x74, 0x9b, 0xd1, 0x2d, 0xe1, 0xe8, 0x3c, 0x4c, 0x33, 0x48, 0x4c, 0xef, 0x12, 0x94,
	0x8e, 0xeb, 0x5d, 0xba, 0xd3, 0xa4, 0x30, 0x4f, 0xe8, 0xc7, 0x30, 0xc3, 0x08, 0x22, 0xa2, 0x49,
	0x56, 0xa3, 0x0b, 0xa9, 0x1a, 0x69, 0xfd, 0xb7, 0xf1, 0xe0, 0x8d, 0xb3, 0xfa, 0x3f, 0x80, 0x68,
	0xde, 0xc7, 0x27, 0x71, 0x28, 0x65, 0x3c, 0xf9, 0xff, 0x0f, 0x50, 0x0d, 0x0f, 0x95, 0xfd, 0x9b,
	0xac, 0xee, 0xe9, 0x5d, 0x30, 0x07, 0x53, 0x2c, 0x7b, 0xfd, 0xc4, 0xd3, 0x41, 0x6c, 0x1e, 0x05,
	0x61, 0x54, 0x3f, 0x3a, 0x66, 0xf1, 0xe4, 0x56, 0xdf, 0x87, 0x59, 0xb7, 0x77, 0x5d, 0xae, 0xed,
	0x51, 0xa6, 0x4b, 0x89, 0x95, 0x3f, 0xbb, 0xfa, 0x39, 0x14, 0x55, 0xb1, 0x92, 0x58, 0x1e, 0x53,
	0x6f, 0x77, 0x2e, 0x54, 0x84, 0x1c, 0x4b, 0x5a, 0x76, 0x25, 0xb3, 0x56, 0xa4, 0x2a, 0xc4, 0xac,
	0x4d, 0xb0, 0xe7, 0x0f, 0xa0, 0x44, 0xb7, 0x01, 0xb5, 0x13, 0xf2, 0x49, 0xc8, 0xad, 0x4c, 0xac,
	0xcd, 0x5c, 0x3d, 0x97, 0xde, 0xe3, 0x71, 0xcf, 0x2a, 0x7f, 0xc9, 0xc0, 0x34, 0x7d, 0x3f, 0x35,
	0xf7, 0x03, 0x5d, 0xc3, 0xb3, 0x30, 0xed, 0xea, 0x9a, 0x6f, 0x58, 0x5b, 0xba, 0x89, 0x32, 0x18,
	0x43, 0x89, 0x3e, 0x6e, 0xd4, 0x34, 0x6d, 0xcf, 0x37, 0x74, 0xd7, 0x43, 0x59, 0x3c, 0x03, 0x53,
	0x94, 0x56, 0x75, 0xb7, 0xd0, 0x84, 0xc4, 0x6f, 0x39, 0x56, 0xcd, 0x46, 0x39, 0x5c, 0x84, 0x02,
	0x7d, 0xdc, 0xd4, 0x0d, 0x82, 0x26, 0xf1, 0x12, 0x60, 0xfa, 0xe4, 0x5e, 0xd3, 0x3d, 0x75, 0xdb,
	0x77, 0x89, 0xb3, 0xab, 0xab, 0x04, 0xe5, 0xa5, 0x90, 0xe5, 0x6d, 0x13, 0x07, 0x4d, 0x61, 0x04,
	0x45, 0xfa, 0xa8, 0x9b, 0x1e, 0x71, 0x4c, 0xc5, 0x40, 0x05, 0x3c, 0x07, 0x33, 0x94, 0xa2, 0x5a,
	0xa6, 0xe7, 0x58, 0x06, 0xa2, 0xc7, 0x21, 0x10, 0x36, 0x7d, 0xf2, 0x29, 0x02, 0xbc, 0x08, 0xf3,
	0x49, 0xbf, 0x28, 0x79, 0x46, 0x6a, 0x52, 0x6b, 0xae, 0x67, 0x55, 0x89, 0x83, 0x8a, 0x95, 0xbf,
	0x4d, 0x00, 0x18, 0x9d, 0xc3, 0x66, 0x5b, 0x3d, 0x6a, 0xe8, 0x1a, 0x3e, 0x07, 0xcb, 0xaa, 0x0c,
	0xcf, 0x77, 0xc8, 0x27, 0x54, 0x23, 0xf5, 0x8b, 0x38, 0xe8, 0x24, 0x9b, 0xe6, 0xba, 0x31, 0xee,
	0xed, 0xec, 0xb0, 0x6c, 0xcd, 0x25, 0x0e, 0x4f, 0xd4, 0x9d, 0x11, 0xb2, 0x03, 0xee, 0xdd, 0x2c,
	0x3e, 0x0b, 0x4b, 0x49, 0x59, 0xf6, 0x97, 0x55, 0xf3, 0xd0, 0xbd, 0x21, 0xa6, 0x3b, 0x60, 0xde,
	0xcf, 0xe2, 0x32, 0x2c, 0x0c, 0x98, 0x3b, 0xba, 0xba, 0xc3, 0x14, 0xa3, 0x07, 0x59, 0xfc, 0x06,
	0x9c, 0x4e, 0xea, 0xd4, 0x08, 0xcd, 0xaf, 0x67, 0xed, 0x10, 0x13, 0x3d, 0x1c, 0xe2, 0xbb, 0x09,
	0xfe, 0xa3, 0x2c, 0x3e, 0x0f, 0x67, 0x92, 0xf2, 0x54, 0xbb, 0xad, 0xaa, 0x86, 0x4e, 0x4c, 0x0f,
	0x3d, 0x1e, 0x02, 0xb8, 0x49, 0xc0, 0x93, 0x11, 0x1e, 0xd8, 0x35, 0x77, 0xdb, 0x77, 0xb7, 0x75,
	0x62, 0x68, 0xe8, 0xe9, 0x08, 0x0f, 0xe2, 0xfc, 0x67, 0x59, 0x7c, 0x11, 0xce, 0x27, 0xe5, 0x3f,
	0xa9, 0x11, 0x67, 0x2f, 0x81, 0xfa, 0x62, 0x08, 0xe5, 0x8e, 0x40, 0x3d, 0xcf, 0x56, 0xfe, 0x31,
	0x05, 0xa5, 0x8d, 0x5e, 0xa3, 0x71, 0xcb, 0x68, 0x86, 0x11, 0x2f, 0xf6, 0x55, 0xb8, 0xa2, 0x26,
	0x9b, 0xc4, 0x21, 0x2a, 0x31, 0x3d, 0xd6, 0x57, 0x8a, 0xea, 0xf9, 0x2e, 0x71, 0x5d, 0xdd, 0x62,
	0xa6, 0x6b, 0xc4, 0xf5, 0xd0, 0x49, 0x0e, 0xff, 0x37, 0xac, 0xbf, 0xaa, 0x8c, 0x6b, 0x5b, 0xa6,
	0x4b, 0xd0, 0xed, 0x1c, 0x7e, 0x13, 0xce, 0xa5, 0x84, 0x5c, 0x4f, 0xf1, 0x6a, 0xae, 0x6f, 0x5a,
	0x9e, 0xbe, 0xb9, 0x87, 0xee, 0xe4, 0xf0, 0x5b, 0xb0, 0x92, 0x82, 0xd0, 0x32, 0xfa, 0xba, 0xb9,
	0x69, 0xf5, 0xcd, 0xdf, 0xcd, 0xe1, 0xb7, 0xe1, 0xcd, 0x31, 0x30, 0x61, 0xf1, 0xde, 0x28, 0x9c,
	0x43, 0xaa, 0xd6, 0x2e, 0x89, 0x87, 0x84, 0xee, 0xbf, 0x12, 0xce, 0x45, 0x0f, 0x72, 0x32, 0xc7,
	0x31, 0x9c, 0x62, 0x18, 0xdc, 0xb6, 0xf4, 0xee, 0xe1, 0xa8, 0x20, 0x62, 0x28, 0xe1, 0xdc, 0xa3,
	0x1c, 0x5e, 0x83, 0x0b, 0x23, 0x82, 0x70, 0x65, 0x52, 0xa4, 0xc2, 0xc7, 0x39, 0x7c, 0x19, 0x2e,
	0x8e, 0x47, 0x0a, 0xa5, 0x4f, 0x46, 0x41, 0xd5, 0x6d, 0xc5, 0xdc, 0x22, 0xbe, 0xb2, 0xab, 0x78,
	0xca, 0xc0, 0xcd, 0xa7, 0x39, 0x5c, 0x81, 0xb7, 0x5e, 0x02, 0x15, 0x6a, 0x9f, 0x8d, 0xc2, 0xda,
	0xaa, 0x68, 0xb5, 0x64, 0x0d, 0xbf, 0x18, 0xe5, 0x42, 0x2a, 0x99, 0x02, 0xfa, 0x7c, 0x54, 0xde,
	0x35, 0x62, 0x2b, 0x8e, 0x57, 0xa5, 0xad, 0x24, 0x5d, 0xfd, 0x32, 0x87, 0x2f, 0xc1, 0xea, 0x38,
	0x9c, 0xf0, 0xf3, 0xab, 0x51, 0xb6, 0x45, 0x30, 0x3c, 0x34, 0x4d, 0xda, 0xfe, 0x3a, 0x87, 0xdf,
	0x85, 0x4b, 0xa3, 0xc3, 0x77, 0xf5, 0x2d, 0x33, 0xd9, 0x71, 0x3f, 0xce, 0xe1, 0x2b, 0xb0, 0xf6,
	0x72, 0xb4, 0xf0, 0xe3, 0x9b, 0x51, 0xca, 0x07, 0xb8, 0x94, 0x2b, 0x3f, 0x19, 0xa5, 0x7c, 0xd0,
	0xce, 0x1b, 0x7b, 0xbe, 0xa9, 0x54, 0x49, 0xdf, 0x97, 0x9f, 0xe6, 0xf0, 0x3a, 0x5c, 0x7e, 0x05,
	0xb8, 0x70, 0xe6, 0x67, 0xb9, 0xca, 0xcf, 0x73, 0x50, 0xac, 0x06, 0x61, 0x58, 0x3f, 0x0c, 0xf8,
	0xc4, 0xcf, 0x43, 0x51, 0x15, 0xaf, 0x09, 0x4d, 0xf1, 0x14, 0x74, 0x92, 0xc7, 0x8b, 0x80, 0xe2,
	0x24, 0x5f, 0x51, 0x77, 0xd0, 0xed, 0x04, 0xd9, 0x21, 0x8a, 0xc6, 0xc8, 0x77, 0xf2, 0x72, 0xdb,
	0xf6, 0xc9, 0x22, 0x94, 0xbb, 0x79, 0x7c, 0x1a, 0x4e, 0x49, 0x8e, 0xa7, 0xc7, 0xdc, 0xbe, 0x97,
	0xc7, 0x67, 0x60, 0x31, 0xc5, 0x12, 0x2e, 0xde, 0xcf, 0xcb, 0x1d, 0x4a, 0x79, 0x35, 0x93, 0xa9,
	0x54, 0x63, 0x1d, 0xf0, 0x20, 0x8f, 0x57, 0xe0, 0xec, 0x48, 0x80, 0x50, 0xf1, 0x30, 0x61, 0x59,
	0x34, 0x1d, 0x17, 0x7e, 0x94, 0xb0, 0x2c, 0x58, 0x42, 0xec, 0x71, 0x1e, 0xaf, 0xc2, 0xeb, 0x92,
	0xb7, 0x45, 0x3c, 0xdf, 0x50, 0x3c, 0xe2, 0x7a, 0xec, 0x51, 0xd7, 0xd8, 0x7a, 0x78, 0xf2, 0x32,
	0x8c, 0x6b, 0xa3, 0xa7, 0x79, 0xb9, 0xc4, 0x25, 0x66, 0x63, 0x2f, 0xae, 0xe3, 0xd9, 0x58, 0xbe,
	0x8b, 0xbe, 0x48, 0x04, 0xc8, 0x6c, 0x58, 0x49, 0x2f, 0x9e, 0x8f, 0x47, 0xb8, 0x36, 0xfa, 0x32,
	0x51, 0x16, 0x8d, 0x18, 0xa2, 0x3c, 0x9f, 0xa0, 0xaf, 0x46, 0x73, 0x5c, 0x1b, 0x7d, 0x9d, 0xaf,
	0x3c, 0x9d, 0x00, 0x60, 0xf7, 0x07, 0xde, 0x1a, 0x22, 0x54, 0x76, 0x50, 0xf1, 0x4d, 0xcb, 0xa9,
	0x2a, 0x46, 0x32, 0x9d, 0x27, 0x05, 0x7c, 0x01, 0xde, 0x78, 0x11, 0x46, 0x2e, 0xfb, 0x82, 0x7c,
	0x5b, 0x73, 0x50, 0x62, 0x9a, 0xee, 0x14, 0xe4, 0x29, 0x20, 0xc1, 0x14, 0xa2, 0x77, 0x0b, 0xf8,
	0x75, 0x28, 0x0f, 0xb8, 0xaa, 0x43, 0x14, 0x2f, 0xd6, 0x47, 0x05, 0x99, 0xc9, 0x14, 0x5b, 0xf6,
	0x52, 0x41, 0x2e, 0x69, 0xc1, 0xe7, 0x53, 0x5a, 0x25, 0xd5, 0x8d, 0xd8, 0x92, 0x7e, 0x50, 0x90,
	0x4b, 0x7a, 0x34, 0x4a, 0x76, 0x55, 0x2a, 0x56, 0xfe, 0x1a, 0x15, 0x0f, 0xfd, 0xfe, 0x4a, 0x59,
	0x4c, 0x81, 0x64, 0xa7, 0xa5, 0x54, 0x25, 0x2d, 0x8a, 0xf9, 0x79, 0x52, 0xa8, 0xfc, 0x29, 0x0b,
	0xd3, 0xf4, 0x02, 0xc2, 0xab, 0xb1, 0x0c, 0x58, 0x15, 0xe7, 0xc4, 0xc1, 0xeb, 0x1f, 0x9d, 0xc0,
	0x48, 0x86, 0x8b, 0x6e, 0x03, 0x5e, 0x80, 0x52, 0x9f, 0x41, 0x37, 0x33, 0x41, 0x77, 0x40, 0xd6,
	0x82, 0x11, 0xed, 0x9a, 0x61, 0xf0, 0x11, 0xa7, 0xaa, 0xee, 0xbe, 0x90, 0xe9, 0xda, 0xe8, 0x1e,
	0xc8, 0xf9, 0x67, 0x4c, 0x19, 0xf0, 0x7d, 0xc0, 0x4b, 0x30, 0x1f, 0x23, 0x8b, 0x10, 0x1f, 0x00,
	0x3e, 0x05, 0x73, 0x7d, 0xba, 0x88, 0xe9, 0x21, 0xc8, 0x7a, 0x32, 0xea, 0xb6, 0xe2, 0xfa, 0xd6,
	0xe6, 0xa6, 0xa1, 0x9b, 0x4c, 0x21, 0x7a, 0x34, 0x8e, 0xed, 0xa2, 0xc7, 0x49, 0xb6, 0xa2, 0x69,
	0x09, 0xe9, 0x27, 0x49, 0x36, 0x6d, 0xed, 0x38, 0xfb, 0x29, 0x54, 0xae, 0x00, 0x76, 0x3f, 0x6f,
	0x46, 0xfb, 0x37, 0xc4, 0xd9, 0x3d, 0x91, 0x57, 0x71, 0xe2, 0xb6, 0xaf, 0xda, 0xbe, 0x5a, 0xd5,
	0xd0, 0x49, 0xb1, 0xf2, 0xaf, 0x49, 0x00, 0x2b, 0xba, 0x11, 0x74, 0x39, 0x4e, 0x8c, 0x0d, 0x3b,
	0x81, 0xfb, 0xdb, 0x44, 0x71, 0xbc, 0x0d, 0xa2, 0x78, 0xe8, 0xa4, 0x24, 0x17, 0x16, 0xe7, 0xb8,
	0x9e, 0x45, 0x4b, 0xad, 0xee, 0xfa, 0xb6, 0xa2, 0xee, 0x10, 0x0f, 0xdd, 0x2e, 0xc9, 0xb4, 0x72,
	0xc0, 0xae, 0x62, 0xe8, 0x9a, 0x68, 0x63, 0x74, 0xe7, 0x85, 0x4c, 0xd7, 0x46, 0x77, 0x4b, 0xb2,
	0x4f, 0x38, 0x93, 0x4e, 0x3a, 0x3f, 0x90, 0xfa, 0xec, 0x44, 0xca, 0x34, 0xdc, 0x7b, 0x29, 0xc8,
	0xb5, 0xd1, 0xfd, 0x92, 0x0c, 0x93, 0x83, 0x1c, 0x8b, 0xb6, 0x04, 0xf1, 0xd0, 0x83, 0x94, 0xf7,
	0x96, 0xc9, 0x12, 0xd6, 0x7f, 0x87, 0xa0, 0x87, 0x25, 0x39, 0xa0, 0x1c, 0x40, 0xb7, 0x05, 0x3d,
	0xdf, 0x73, 0xee, 0xa3, 0x92, 0x3c, 0xc8, 0x71, 0x2e, 0x93, 0x13, 0x87, 0x80, 0x9a, 0x4d, 0x03,
	0x41, 0x8f, 0x4b, 0x72, 0x48, 0x63, 0x10, 0xba, 0xaf, 0x05, 0xff, 0x49, 0x3a, 0x7f, 0xec, 0xf2,
	0x10, 0x3b, 0xb6, 0x3f, 0x2b, 0xc9, 0x45, 0xc4, 0x01, 0x23, 0x4f, 0x1a, 0x29, 0x25, 0xec, 0xa0,
	0xeb, 0x59, 0xfd, 0xd3, 0x18, 0x7a, 0x3e, 0x16, 0x40, 0x37, 0x66, 0x49, 0x76, 0xcf, 0x20, 0x8d,
	0x62, 0x7a, 0xd9, 0xda, 0x1c, 0xc3, 0xa6, 0xbb, 0xb3, 0x24, 0x37, 0x32, 0x67, 0xb3, 0x0e, 0xf4,
	0x1c, 0xc5, 0x74, 0x37, 0x85, 0x03, 0xbf, 0x1c, 0x8f, 0x70, 0x6d, 0xf4, 0xab, 0x54, 0x2e, 0xf9,
	0xd8, 0xf2, 0x6c, 0xe8, 0x6c, 0xc5, 0xa0, 0x5f, 0xbf, 0x04, 0xe2, 0xda, 0xe8, 0x37, 0xa9, 0x6c,
	0xb1, 0x3c, 0xda, 0x8e, 0xb5, 0xad, 0x6f, 0xe8, 0x1e, 0xd1, 0x58, 0x46, 0x7f, 0x9b, 0x6a, 0x19,
	0x75, 0x9b, 0x50, 0x90, 0x2a, 0xab, 0x6f, 0x99, 0xc6, 0x1e, 0xfa, 0x5d, 0xa9, 0x62, 0x43, 0x51,
	0xed, 0xb4, 0xa3, 0x6e, 0xa7, 0xc5, 0x27, 0x40, 0x64, 0x50, 0x5c, 0x31, 0x85, 0x58, 0x3f, 0xc5,
	0x27, 0x78, 0x1c, 0xc0, 0xb5, 0xd1, 0x6d, 0x5c, 0xf9, 0x7b, 0x16, 0x66, 0xe5, 0x95, 0x9d, 0xea,
	0x6c, 0x48, 0x47, 0xe4, 0xf5, 0x73, 0xf0, 0x87, 0x7c, 0x4d, 0xa0, 0x93, 0xf2, 0xcb, 0x40, 0x54,
	0x77, 0x59, 0x9e, 0x1f, 0x07, 0x20, 0xbe, 0x55, 0xe9, 0x5d, 0xc4, 0xf6, 0xe4, 0xf9, 0xfe, 0xde,
	0xab, 0xe0, 0xe8, 0xc0, 0x94, 0xe5, 0xf1, 0xb1, 0x8f, 0xa3, 0x25, 0xdf, 0xb4, 0x9c, 0x6b, 0x96,
	0xa3, 0xe9, 0xe6, 0xe0, 0x5c, 0x81, 0x1e, 0xbc, 0x22, 0xd4, 0xb5, 0xd1, 0xc3, 0xb2, 0x6c, 0x82,
	0x3e, 0x34, 0x06, 0x63, 0x2b, 0x70, 0x3c, 0xc2, 0xb5, 0xd1, 0xe3, 0xe1, 0x74, 0xc4, 0x10, 0xf2,
	0xe5, 0x51, 0xae, 0xfc, 0x3e, 0x0b, 0xc0, 0xbf, 0xa0, 0xb1, 0x2f, 0x32, 0x4b, 0x80, 0x1d, 0xb2,
	0x59, 0x73, 0x69, 0xa0, 0x8a, 0xcb, 0x0e, 0xde, 0x26, 0x41, 0xaf, 0xe1, 0xf3, 0x70, 0x36, 0x4d,
	0xef, 0xcf, 0x38, 0x71, 0x50, 0x06, 0xbf, 0x09, 0xaf, 0x27, 0x01, 0x03, 0xae, 0xbf, 0x59, 0x33,
	0x0c, 0x44, 0xef, 0xac, 0x67, 0x86, 0x74, 0x68, 0x1b, 0x52, 0xc5, 0xc4, 0xb0, 0x0a, 0xd3, 0x92,
	0x53, 0xcc, 0x21, 0xb9, 0x91, 0x10, 0xc7, 0xaa, 0x79, 0xb2, 0xbd, 0xd1, 0x24, 0xbe, 0x08, 0x2b,
	0x49, 0x88, 0xb6, 0x31, 0x58, 0x97, 0x9b, 0x8a, 0x6e, 0x10, 0x0d, 0xe5, 0x87, 0x15, 0xed, 0x12,
	0x87, 0x5d, 0x34, 0x3c, 0xcb, 0xf2, 0x2d, 0x43, 0x43, 0x53, 0xa3, 0xdc, 0xf5, 0x06, 0xdf, 0x3f,
	0x0a, 0x95, 0x26, 0x94, 0x76, 0x9a, 0xfb, 0x37, 0x9d, 0xa0, 0x1e, 0x8a, 0x2f, 0xf7, 0x6f, 0xc0,
	0x19, 0x36, 0x47, 0xd2, 0x70, 0xcd, 0x36, 0x74, 0x95, 0x9a, 0x65, 0xe3, 0x94, 0xc1, 0x67, 0x61,
	0x39, 0xce, 0xaf, 0x5a, 0x1b, 0x74, 0x30, 0x29, 0x09, 0x65, 0xf1, 0x19, 0x58, 0x8a, 0x33, 0x07,
	0xb3, 0x88, 0x26, 0x2a, 0x57, 0xa1, 0x64, 0xb5, 0x5b, 0xcd, 0x76, 0x40, 0x6f, 0xe0, 0xcc, 0xd4,
	0x0a, 0x9c, 0x13, 0x53, 0xc8, 0xba, 0xc6, 0xdb, 0xb3, 0x89, 0xbf, 0xe9, 0xe8, 0xc4, 0xd4, 0xf8,
	0xb7, 0xa4, 0x4c, 0x65, 0x17, 0x8a, 0x89, 0xdf, 0x36, 0x96, 0x00, 0xc7, 0xd7, 0x2e, 0x97, 0x46,
	0x19, 0xbc, 0x0c, 0x0b, 0x09, 0x3a, 0x7f, 0x17, 0xa2, 0x2c, 0x5e, 0x84, 0xf9, 0x38, 0xc3, 0x20,
	0xca, 0x2e, 0x41, 0x13, 0x95, 0xff, 0x85, 0x99, 0xf8, 0xaf, 0x15, 0xcb, 0xb0, 0x20, 0xef, 0x68,
	0xcc, 0x09, 0x57, 0x37, 0xb7, 0x0c, 0xaa, 0x77, 0x09, 0x70, 0x82, 0xc1, 0xbf, 0x63, 0x65, 0x2b,
	0xdf, 0x63, 0x3f, 0x05, 0x30, 0xd9, 0x32, 0x9c, 0x62, 0x27, 0xfb, 0x81, 0x9c, 0xef, 0x91, 0x4f,
	0x3d, 0x94, 0xc1, 0xa7, 0x61, 0x31, 0xcd, 0x51, 0x6a, 0x9a, 0x6e, 0xa1, 0x2c, 0x35, 0xd8, 0x67,
	0xf1, 0x73, 0x11, 0x93, 0x99, 0x4f, 0x68, 0xe3, 0x0c, 0x2e, 0x82, 0x2b, 0x37, 0x00, 0x62, 0x1f,
	0x9b, 0x97, 0x61, 0x81, 0x7f, 0x67, 0xe1, 0xd0, 0x6b, 0xba, 0xa9, 0x59, 0xd7, 0x5c, 0x94, 0xc1,
	0x0b, 0x30, 0x17, 0x67, 0x54, 0x15, 0x15, 0x65, 0xd3, 0x44, 0xdd, 0x72, 0xd1, 0x7c, 0x5a, 0x85,
	0x62, 0x6a, 0x8e, 0xa5, 0x6b, 0x08, 0x57, 0x3e, 0x12, 0x5f, 0xfb, 0xc5, 0x87, 0xf5, 0x79, 0xe1,
	0x20, 0x05, 0xf1, 0x43, 0x2f, 0xff, 0xf0, 0x17, 0x23, 0x7b, 0x55, 0x9a, 0x94, 0x2d, 0x98, 0x63,
	0x72, 0xd5, 0x4e, 0xa3, 0x79, 0x70, 0x8b, 0x49, 0x9f, 0x86, 0x45, 0x0e, 0xab, 0x5a, 0x9a, 0xbe,
	0xb9, 0x27, 0x2c, 0x69, 0x1a, 0xcf, 0xce, 0x30, 0x4b, 0x23, 0x06, 0xca, 0x56, 0xfe, 0x0f, 0x90,
	0xd7, 0xad, 0xb7, 0xc3, 0x83, 0xa0, 0x4b, 0x8f, 0x84, 0xe2, 0x17, 0x42, 0xc4, 0x5f, 0x23, 0x14,
	0xd6, 0xaf, 0xfb, 0x22, 0xcc, 0xc7, 0xa8, 0xb2, 0xea, 0x95, 0x10, 0xe6, 0x78, 0xae, 0xa8, 0x38,
	0x6d, 0x9e, 0x80, 0x76, 0xa6, 0x88, 0x96, 0x1f, 0xf8, 0x08, 0xdb, 0xe4, 0x8a, 0xb6, 0x87, 0x5e,
	0xa3, 0x55, 0x8e, 0xf3, 0x54, 0xc5, 0x54, 0x89, 0xc1, 0xab, 0x1f, 0xa7, 0xf3, 0x41, 0x42, 0x59,
	0xea, 0x4b, 0x9c, 0xae, 0xd1, 0xed, 0x32, 0x51, 0xf9, 0x51, 0x06, 0x4a, 0x03, 0xab, 0x4e, 0xa7,
	0x15, 0x37, 0xea, 0x10, 0xc5, 0x60, 0x97, 0x3f, 0x97, 0x98, 0x1a, 0x9b, 0xa3, 0x11, 0x3c, 0x7a,
	0x92, 0x22, 0x0e, 0xca, 0xd2, 0xdc, 0x08, 0x9e, 0x3c, 0xd5, 0xd5, 0x6c, 0xc3, 0x52, 0x34, 0x34,
	0x41, 0xc7, 0x2f, 0xc5, 0xd2, 0xac, 0x6b, 0x26, 0x63, 0xe6, 0x2a, 0x7f, 0xcd, 0xc1, 0x1c, 0x0b,
	0x99, 0xfd, 0x9e, 0x48, 0xba, 0xdd, 0x4e, 0x97, 0x76, 0x54, 0xfc, 0xd5, 0x49, 0x1c, 0xc7, 0xb4,
	0x7c, 0x6b, 0x07, 0xbd, 0x86, 0x2b, 0xf0, 0xf6, 0x30, 0x47, 0xdc, 0x2b, 0x3c, 0xc5, 0xdd, 0xa1,
	0x17, 0x2c, 0xe2, 0x38, 0x16, 0xf5, 0xf6, 0x12, 0x5c, 0x18, 0x8f, 0xe5, 0xc0, 0x2c, 0xbe, 0x0c,
	0x6f, 0x0d, 0x03, 0xf9, 0x02, 0xd4, 0x4d, 0xb6, 0xc2, 0xf8, 0x51, 0x0d, 0x4d, 0xe0, 0x77, 0xe0,
	0xd2, 0x30, 0x54, 0x82, 0xd8, 0xd4, 0x6e, 0x5a, 0x0e, 0xd3, 0x8e, 0x72, 0xf8, 0x03, 0x78, 0x7f,
	0x18, 0x3c, 0x38, 0xb6, 0x5f, 0xd3, 0xbd, 0xed, 0x81, 0x01, 0xee, 0x3c, 0x9a, 0xc4, 0x57, 0xe0,
	0xf2, 0x38, 0x29, 0xdd, 0x30, 0x74, 0xa2, 0x6c, 0x89, 0xdd, 0x96, 0x1f, 0xed, 0xd1, 0x00, 0x5e,
	0xdd, 0xd1, 0x74, 0x47, 0x44, 0x3a, 0x85, 0xdf, 0x83, 0x77, 0xc6, 0x81, 0x2d, 0x9b, 0x98, 0xbc,
	0x3f, 0xb8, 0x40, 0x01, 0x7f, 0x04, 0x57, 0xc7, 0x09, 0xb0, 0xcb, 0x3d, 0xbf, 0x0c, 0x10, 0x45,
	0x23, 0xd2, 0xd0, 0xf4, 0xcb, 0x0c, 0x29, 0x86, 0x61, 0xa9, 0xf4, 0x42, 0x25, 0x04, 0x00, 0xff,
	0x17, 0x5c, 0x19, 0x27, 0xe0, 0x12, 0xb2, 0x43, 0xbb, 0xc7, 0x25, 0x9e, 0x10, 0x99, 0xc1, 0x6b,
	0x70, 0x71, 0x9c, 0xc8, 0xa6, 0x6e, 0xea, 0xee, 0x36, 0xd1, 0x50, 0xb1, 0x42, 0x60, 0x7e, 0xf8,
	0xf7, 0xfb, 0x45, 0x98, 0x97, 0x7b, 0x52, 0xae, 0x60, 0xda, 0x61, 0xa7, 0x61, 0x31, 0x45, 0xd6,
	0x88, 0x41, 0x3c, 0x82, 0x32, 0x95, 0x0d, 0x38, 0x35, 0xea, 0x77, 0x19, 0xba, 0x58, 0x34, 0x62,
	0x7b, 0x09, 0x35, 0x4b, 0x80, 0xe3, 0x34, 0xa9, 0x63, 0xe3, 0x2c, 0x2c, 0xef, 0x77, 0x8e, 0xd6,
	0x8f, 0x3a, 0x87, 0xbd, 0xef, 0x36, 0x83, 0xf5, 0x28, 0xe2, 0xff, 0x13, 0x72, 0xbd, 0x77, 0xb0,
	0x3d, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x69, 0x32, 0xd3, 0x2e, 0x22, 0x00, 0x00,
}
